%!PS-Adobe-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: /Users/sepehr/Dropbox/Lecture Notes/Intelligent Systems/Lec5 - Linear Regression/.texpadtmp/Bayesian Statistics.dvi
%%CreationDate: Tue Jul  9 15:58:36 2019
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 363 273
%%DocumentFonts: TeXGyreTermes-Bold TeXGyreTermes-Regular
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: /usr/local/texlive/2017/bin/x86_64-darwin/dvips -o
%+ "/Users/sepehr/Dropbox/Lecture Notes/Intelligent Systems/Lec5 - Linear Regression/.texpadtmp/Bayesian Statistics.ps"
%+ "/Users/sepehr/Dropbox/Lecture Notes/Intelligent Systems/Lec5 - Linear Regression/.texpadtmp/Bayesian Statistics.dvi"
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2019.07.09:1658
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: ntx-ec-tlf.enc 0 0
% T1 encoding, tab lf

/encntx-ec-tlf[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def
% Ligatures to enforce
% LIGKERN f f =: ff ; f i =: fi ; f l =: fl ;
% LIGKERN ff i =: ffi ; ff l =: ffl ;
% LIGKERN hyphen hyphen =: endash ; endash hyphen =: emdash ;
% LIGKERN quoteleft quoteleft =: quotedblleft ;
% LIGKERN quoteright quoteright =: quotedblright ;
% LIGKERN comma comma =: quotedblbase ;
% LIGKERN less less =: guillemotleft ;
% LIGKERN greater greater =: guillemotright ;
% LIGKERN question quoteleft =: questiondown ;
% LIGKERN exclam quoteleft =: exclamdown ;
%
% Kerns to eliminate
% LIGKERN space {} * ; * {} space ;
% LIGKERN zero {} * ; * {} zero ; one {} * ; * {} one ;
% LIGKERN two {} * ; * {} two ; three {} * ; * {} three ;
% LIGKERN four {} * ; * {} four ; five {} * ; * {} five ;
% LIGKERN six {} * ; * {} six ; seven {} * ; * {} seven ;
% LIGKERN eight {} * ; * {} eight ; nine {} * ; * {} nine ;

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

 /pgf1{gsave exec 4.00005 0.49998 moveto 2.00002 2.00002 lineto 4.00005
3.50003 lineto pgffill 16.0002 0.49998 moveto 18.00021 2.00002 lineto
16.0002 3.50003 lineto pgffill  grestore} bind def

 /pgf2{gsave exec 2.39105 3.38733 8.26909 0.79701 pgfe pgfstr  grestore}
bind def

 /pgf3{gsave exec 4.00005 0.49998 moveto 2.00002 2.00002 lineto 4.00005
3.50003 lineto 16.0002 0.49998 moveto 18.00021 2.00002 lineto 16.0002
3.50003 lineto pgffill  grestore} bind def

 /pgf4{gsave exec 2.39105 3.38733 6.97394 0.0 pgfe 7.80008 2.40001
moveto 7.80008 3.20003 lineto 11.20012 3.20003 lineto 11.20012 0.8
lineto 10.4001 0.8 lineto 8.6001 3.20003 moveto 8.6001 4.00005 lineto
12.00015 4.00005 lineto 12.00015 1.60002 lineto 11.20012 1.60002 lineto
pgfstr  grestore} bind def

 /pgf5{gsave exec 4.00005 0.49998 moveto 2.00002 2.00002 lineto 4.00005
3.50003 lineto 16.0002 0.49998 moveto 18.00021 2.00002 lineto 16.0002
3.50003 lineto pgffill 0.59776 pgfw 8.00009 4.00005 moveto 11.00012
4.00005 lineto 9.00009 2.00002 moveto 12.00015 2.00002 lineto 8.00009
1.0 moveto 11.00012 1.0 lineto 9.00009 0.0 moveto 12.00015 0.0 lineto
pgfstr  grestore} bind def

 /pgf6{gsave exec 0.59776 pgfw 9.00009 3.00003 moveto 12.00015 3.00003
lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 4.00005 0.49998 moveto 2.00002 2.00002 lineto 4.00005
3.50003 lineto 16.0002 0.49998 moveto 18.00021 2.00002 lineto 16.0002
3.50003 lineto pgffill 0.59776 pgfw 8.00009 1.0 moveto 11.00012 1.0
lineto 9.00009 0.0 moveto 12.00015 0.0 lineto pgfstr  grestore} bind
def

 /pgf8{gsave exec 0.59776 pgfw 8.00009 4.00005 moveto 11.00012 4.00005
lineto 9.00009 3.00003 moveto 12.00015 3.00003 lineto 9.00009 2.00002
moveto 12.00015 2.00002 lineto pgfstr  grestore} bind def

 /pgf9{gsave exec 10.0001 -0.49998 moveto 10.0001 4.50003 lineto pgfstr
 grestore} bind def

 /pgf10{gsave exec 0.59776 pgfw 4.00005 4.00005 moveto 7.00008 4.00005
lineto 5.00005 3.00003 moveto 8.00009 3.00003 lineto 5.00005 2.00002
moveto 8.00009 2.00002 lineto 3.00003 1.0 moveto 7.00008 1.0 lineto
5.00005 0.0 moveto 8.00009 0.0 lineto 12.00015 3.00003 moveto 15.00018
3.00003 lineto 13.00015 2.00002 moveto 16.0002 2.00002 lineto 13.00015
1.0 moveto 16.0002 1.0 lineto pgfstr  grestore} bind def

 /pgf11{gsave exec 0.59776 pgfw 8.00009 4.00005 moveto 11.00012 4.00005
lineto 9.00009 3.00003 moveto 12.00015 3.00003 lineto 9.00009 2.00002
moveto 12.00015 2.00002 lineto 8.00009 1.0 moveto 11.00012 1.0 lineto
9.00009 0.0 moveto 12.00015 0.0 lineto pgfstr  grestore} bind def

 /pgf12{gsave exec 0.59776 pgfw 10.4001 1.60002 moveto 12.00015 0.0
lineto pgfstr 0.3985 pgfw 10.66016 2.49069 moveto 10.66016 3.15096
10.1249 3.68622 9.46463 3.68622 curveto 8.80435 3.68622 8.26909 3.15096
8.26909 2.49069 curveto 8.26909 1.83041 8.80435 1.29515 9.46463 1.29515
curveto 10.1249 1.29515 10.66016 1.83041 10.66016 2.49069 curveto closepath
9.46463 2.49069 moveto pgfstr 1 setlinecap 4.00005 0.0 moveto 5.08101
0.0 6.00006 0.9 6.00006 2.00002 curveto 6.00006 3.10002 5.10005 4.00005
4.00005 4.00005 curveto 2.90001 4.00005 2.00002 3.10002 2.00002 2.00002
curveto 3.20003 2.60002 moveto 2.00002 1.60002 lineto 0.8 2.60002 lineto
16.0002 0.0 moveto 14.90016 0.0 14.00017 0.9 14.00017 2.00002 curveto
14.00017 3.10002 14.90016 4.00005 16.0002 4.00005 curveto 17.1002 4.00005
18.00021 3.10002 18.00021 2.00002 curveto 19.20023 2.60002 moveto 18.00021
1.60002 lineto 16.8002 2.60002 lineto pgfstr  grestore} bind def

 /pgf13{gsave exec 1.5 0.49998 moveto 3.50003 2.00002 lineto 1.5 3.50003
lineto pgffill  grestore} bind def

 /pgf14{gsave exec 1.5 0.49998 moveto 3.50003 2.00002 lineto 1.5 3.50003
lineto 3.50003 0.49998 moveto 5.50005 2.00002 lineto 3.50003 3.50003
lineto pgffill  grestore} bind def

 /pgf15{gsave exec 3.50003 0.49998 moveto 1.5 2.00002 lineto 3.50003
3.50003 lineto pgffill  grestore} bind def

 /pgf16{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf17{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf18{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf19{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf20{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf21{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf22{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash
3.00003 0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto
-1.65689 3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689
-1.65689 -3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689
3.00003 0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc
pgfstr grestore newpath  grestore} bind def

 /pgf23{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: TeXGyreTermes-Regular
%!PS-AdobeFont-1.0: TeXGyreTermes-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2006-2009 for TeX Gyre extensions by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS). Vietnamese characters were added by Han The Thanh.
% Supported by CSTUG, DANTE eV, GUST, NTG, TUG, and TUG India.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% See the MANIFEST-TeX-Gyre-Termes.txt and README-TeX-Gyre-Termes.txt
% files for the details. For the most recent version of this license see
% http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt or
% http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt
% This work has the LPPL maintenance status "maintained".
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-TeX-Gyre-Termes.txt file.
% ADL: 750 250 0
%%EndComments
FontDirectory/TeXGyreTermes-Regular known{/TeXGyreTermes-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2006-2009 for TeX Gyre extensions by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS). Vietnamese characters were added by Han The Thanh.)readonly def
/FullName(TeXGyreTermes-Regular)readonly def
/FamilyName(TeXGyreTermes)readonly def
/Weight(Regular)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /TeXGyreTermes-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-526 -281 1306 1055}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E69EBAE83EE4CBE2A05A11F41656ABDAB7F0E2
F8703F239B27DCBA1EF5ACBA14710D2F55A39FE1507C4C8E4113D260E8FB31C9
14B12786A77D82F2CECB0B69D3D6F6F9545BB0DBCC40FF7040BBB5009F55A1DD
ADFB875AA6DD473C38A8BFF0B34F12BA7144EFF5C17CAC8ADB0096B362374FC3
B5C15FEBB670684EF7DECAE5FB1343C6B2AFCF9F1AC867F19E8BAD7B489B0F48
A229B7386308E5C03E8A437A5DD1ECD9DCFA098D6176228399D313C0E5DABF47
37DBB8983F6D19497763B519216790852360F2FDFA7DF92DFA59EBF54BF586D1
0FF5A012D3900BE8CDA79CA168334ED88A0E965F18B533E047754AD34FDFDECB
C0658FAE7ED73A8C2E69046B5B053A63261EA05115552B4A464908C4E2EDF6BE
70FB2DC8E506140E0FED2D3A850D55000FDEF74DA8898F8470976B60C43E3E82
AF516450B568A66965BE426DF4193B84435DF9CD8DB50038D5A827B73BF1EC90
D17B223B9D9F8E68A3CE37D045928FEFC7EB2D6DDE7DA6FE437DBE2AE40DFC12
6850E1495B2E8E6C70B8A374A9013911BABEED7323FA56307E32783B3F3E6771
3144AE90784A1B4D82B8A28834C5E3EF72B14ACA0EA7BCBC026696232AD84D07
0A8107929E7149EFBC62A6893C4F11EA4BA9A6DEAE6B7A94F323832D88FA2818
311E4DFA68028149CB10E12453AE28A6747E958407845562566CD45CB2B96B02
BECFC5BDAD8DC408178C48FD59D42DC2B9926EF85BFA7FD950C32BC70B63C9D3
53976AD65591E34EC130B5FC1DDE81CD35AD9F525EE1A078125D1B65C81EF26F
EF0B31289BB081E0D2780D443CDAE737A2E6D665F923718C7289CBD2C66FF2FC
4AFA782F3CA60D223DE52F6F77514E9B3F1E25738C05FE817A506CA690FD31A8
5FFCA07FA0DFD7504532611E281CCB38B98AF338972A6486FBAD0000A1F812BC
8BEAC1285C1AC8C38E5A7FBF4D2CC4036A3E89BBB5B1020EBD3D8AF8736E38FE
2D6A4613CB05BD1A3B4B51ECA5F5F8355ABBA2247D4851F5F4605A66D92A946D
37369EEA3F6C52D98C36444F32C80B1DCD77F39D2FB36A2AB5F41BAF1DE734EB
7731CBAB88C535BD22357C1CD6CA045F663A3C778DA0701AE0F430C1539275A5
FFB5AA19523E6B184E1293F5E245E294E058F3B1FB5B84DF9EB22D650029AF22
167ADAE231D4D9D64EF1730D6DEBDCBF85188AF9E3CB3801A1338E70052F863C
4AC914313AB4547FF3CC2582AA9FAFAB0ED3CE81D63F54FC400D537ADB7CAA32
BF9D5C2979D409E4D68BB6DFCA013CADA8515C4A4972910354AB20C935E0EA15
8B8AAAFAE88920C04B03D5A1861D48AAC7C0A4EBF72DD47FC35EA952A2CE751B
F57B670F26C27616669DD6BAE476853BE186DEB0299AD75457E41EABC03561CD
9D11FB4AF6FC74B2621802B29C21B888D82EA89F2A4B3386D8A52B15B471F275
FF97B103E77B80A9643541BFA570DFD8F4C41F743CA205B438012F457ADC722F
8255E3A60313010889FE5A957122C49507C2B4F3FA7769DB73CD3BAFF3971137
F1085A1BDB04A65CBB6605D4D72E11338D87D5B02838FEFAC98823349A006962
271222E34A3E300066B22D0D49BFA0463236B5BA83B2B00D405B8A4371916BC8
467A08C5DFC6B90532448CAC99392DEABCD681246D5BD65C19329BA90A6860DC
939E6D418E4020AFAD9B94D4440EDC6802C21B5561DBC1B19BFA4431E2C56478
93C4CF1CAE3ED55EEF399CA17B715C8A6DA4099DE6945323B1F41340EB97BAA2
AAA2D619527A955C5840E4BA73C101262A711742C32F3F5A1C25F7D6A8D961E7
9DB877A5B3EE0EBAE8E5652378AA6CA84F0A02D1B80DD9C18D6565A29B18C26A
4F1D951390AD6A52E1EF716CF9A6D08728DA3D95ADF1C5C812B03E2569E0FA76
6E81B1ABDD850E11E9FD1CE7AAE698A0F9C6EF485DCBAC1D41B43FFFA6E25A56
81980B77285AF5B5CF6C01A3DE03DE47BBEA61F6629B9FAEC2285C11F2D18850
DE6284BF194078E709BF8F7FFD497736E320C0711A3FDE352E7E4E5DDA08D332
0596481AC1993FD9B855AA0BC6B2582E6D065675564DBFFF9566BEA855A0A2FC
73C240A00DDF624B76DD5A3F356E030FFD1FEABB69BFB039451AD0062C6D1C5D
BC43F8626DD9470582E82C1049D71A62F347B370619420086DE4B24C807267DA
A1D8E55DBE5EDF25137B9C75F2C99248D66ADC7A193A92A619912D6E5343AEFB
67DC6F456C617AEA0A8F1A282E51115F15CF4DB4DF6BE1D14392E5B3FD114085
0599926BFB60523D0F4C04618D8B2339416E4A6DCFA5D0AC6373F82E762B3C68
01A8D444C47FB66B4659FC3F8DF91CEE9CB8192E85A4E0740F8195CDB65DD45B
C77D70D0A3DE21CA388AC0AD49AA700F3B087F435BA22D15D98EE70556EF9EB6
764B4F863775618138431CE2A93113039E61FFD5012F25E7DA43F1F650AA4969
7E060266FF11B1CD252C8D243C0EA7AA2C44D0E1275E303E43D481EF727F0145
8FFE74205549FEF6A80ED936A4BEF78AD52E342680AD308DB487846D17E94338
5553E982B7D5FF574C3FF09378E5799447FC44E4C739D89740749BF8CD56B13A
2DC3760CD39E703D86EBFDCF4DB4D499701829ADDBA888097FE7CA2FB77367AD
EDFB35A00376FA912B8D5CFAC07888441EBA284196D0A5173202920271CAFDB3
826AACF4489BE8FF031DD6D2DE4003D4C7C95FDAFE8ABD88CFAC88DC92552508
1AA905C09F01A078E4D1343EBAB85B6490E323339D9456E29DEF9BD1721F2488
6CD4EF6CE74C984FD1EBF250019F736B0BE1FF41B7C7648602DD62C32CDF44DD
8E430DCB7638E2EF14CBECA6C2E7E0A6FDC0D15A6913B9819B3642F18A03B813
9B8EEC22BEE2E8A1A721E5A28DCB5D3CC22758A082AEDF8E3B035DD4598E9590
DDC2A7874BA5012F938B6566BD816C96D704A30F5494AE4D6997ACB9C196A231
23BB399318B4D2A836F88D24D6FE389FB491460381531F9216A04022FDD663FD
D73F1821CE0B89A114C17D7BB7A7D771AEA61BBCCDA82A297301E08647D8B480
F14B9D9A5B20898C25C34DD931F1B140004B109FCC2DF46F924B061AEC1F051B
1A6604FF260CA7DA81F744079461180436BC926F08D69F8EC5737F8826C5D1FB
E73F88F7ED00419F673E4C6AF2D8245C78A6FA89D6C59AAEB45CBFEE7495F8C6
A43E30F916ED75C3B58C7B93A5357D715FFA30FEBAC715556972F915E9059264
1FE99B4D86F2CAB2B61F652CC957EE7F9DB99A4CB309AFB6D06F28AD54C9C388
ED98CDC036DDA3B3BDF2721951FCD97D40ACB70C5FA5BE68985818B87ECCE3A0
213E77E529C2C074B174625387DBC7BAC0AB21DF14947CFA3DFEBEB43427D4B8
A46A225EAE85E5CE593D4FFCD7265AEFE9BE36A4736B8746657FE87EFB947F6E
F31DCC61CDDFC39A2771876D9AC309B9E8CB4472C20F42917BA4B020DB0FBFDB
400532420A41CF958B1DDE1BEAF9868F31824A89D35072F362FB3B3C1B14242B
4698C022109AFAEF6A8CAA187FFA24144AF9A62F7A0EB816225009664E3D8D89
8DF395CE9A836EFFBC02B41CBE8D589CF50BA27AE16872A5C2A3AB701369C9C6
27C4A31F0982334E7F865433D845EC970C7711DDE28B2A220EEEA74FEDFE4ACB
C123E41D496A78F5CFB472230CDA008F37FBD691DB724D8EB849189DD4D793A9
4EFC1C50B811EAE95E1F7CA26FAFD56023EEDC6A1D3AC570D6CC1CA8D3652DB7
4F828CD6355CCBBFD6CFA982D1EC42F237D3D9043C7A287733031776912B98D4
49008C02ADD52C7C83CBB8EB531837396EB5AA7BE08E08FEB6872FDF256B662E
6DFEAEFCD319C14ECC81D86640D779925FF719FD124FD7CD9341AB55C7294195
B48964E2F4A5131450CA8349B2329C5A790B7E639F78BA7BAAA5FBA404C1E2CB
ADC35CC868597733C80576D274C172B51255659B30F827A2237BB0883C2F9344
64D82C2ADB6AE9F34E4D09B3E7D97174925A908E1E9E3FF3FA0CBEC238170CEE
768BA5B6BDD6D1510EFB6BEF2419C6F8481AA6A33920FAD9A7F7A6CC1703EE06
340147C6190D3C27980F2AC626048688FD358323496D88825240DC96A8F6879E
2135374C70D79D19EA9EFDD4781A94189CA5ADB8F0EE8F6AE215F8555DC1C0D7
5FC7495569D762FDC1622DF8D7621812685D7D153D0960624820DE4C1F23B16A
9440AD00F6BA5601CEB6D079B60A52325904149416BC5E7F6CC39A8288A88398
39032BA6A323C0FB989D53EB4A5AC25A0858B10DC043C40E7BC06D801AA613EF
09BCB258EAEB5620FCF91935C2F4392E853E397DC111E36130DCAED0AA9A795B
E07B58C32B7EC61E25A04D9693D78163BD216D3ECEBA4966DB71B23B0A9CF1F1
FB873365EA1FCACDD36E447CF5B592DF5019EAF0494ABAC8B0D0FF9FF6BEB146
9AA6E421FD054E895299785FF6190EF689DDCB6281B4914BE74636F3AD561C22
720C0C78F40D46FFD5B2E65606F7F1BE0945EB11CB82077372CAF43778FC88C1
5FD48EC5414CE681C93A77466C064827E8CCA4DAF7D623EAB0213F26989D59C1
9520CBE7228870D2168A99303C380EFCA2969295B73342C6E3CCC0C03A5394F5
1C5FC6AC8956D3D6E88FE09CC08E327ED027B81EB14663E3073EA5D8AA68EFC6
C2F83AE423590FCFCD5F871F03C22DA4FCCD70979EB7850AB4020DE478A1737A
36870CCB24CCCA9C7B48801C93F72BD152843B824961969AA1317F148C1D058B
58FBC1802B0C648C191F49B0445E4D9172E1168CB3F312FDFD210D6311CC0709
87DB17E7D56CEAD8781CB61E06A5D7D9D85748FD8B81BE6AC0D179D8120F9DBE
43F26A830558CD47D3C668D629FD1923CC317961C98DDA6AB68A4B14D70599BB
C56D832892EBE9E2BB72A5C64A37DD52DD42EA7B5C525587613D335148791C6F
B5E9D352A743AA3677BA05A43742D2F19BE31AD5366B52C7D538FBDC947585D9
FA5D0659BB7A9EBD415687124C8FC48CFD8E6C388E38A36437B7C085B17C9070
C59EE4575B63AB30DC3F3BB4B4EFDC6DD658FEAFE642F6F31526B876ADBDECF5
F5ADE953A58A8B69F09F520D6F44A9F24156E4E912CFFD9238607DA31A589BA7
AFC5418E3ED4DBE447DDEFB6092A54D213F2519554C19369F0F959DF912CB44A
A85ADF6C9108935595DA856256A5356184235C92E22567DDC967BF400AF513ED
EDEBF50C61D9A0773DE66B594BB6BD224F9E55B1187997532BD69AAA725C73F1
01DD501B215E0C207067F1E695951C726032A1B387F4CB885E940AB179C9355C
E53FBE5B478692084792AB8FAFB63363920E22A90ED50572B49954D81E42476E
FFCCE2E3AE152D3552B881E82055EF9B1B335ABE3C34C75A51A79CA47EC30170
88AA3D8B5ABEAC7EC956DD2B616484AD85E62A5BB2568678DE7ABFBA623B5910
397ED2CACF4A77D3C395367C6D3242A71CDD4F4AF7C95B4C51F1DFADB1116E4F
B81DEAAB0CB008421D1582EA233C284C6B2558C0BA02DE051B617F9A19D5DAEC
F77E213A843DDC80D805CFE4868E62C90C06533AE6C9A73E86D28EA0034DD0FE
D90BA80012FF3E87024C249F029FE21E9F7DCC0DF6D98F56CB1C9658C5F82408
AE2CFDC470992D22AB847F88919FCAF407C96C3AA0B2F20F09BD3620CAE5DD8B
F0420343CD71129BB02C719BC5709E95316A5862B161701E73234DC803CFAF7C
88ED35A539DC0F7395745379D6645D0908A9F5DE65F7AE355C2A57257BA4CA80
D0B50FA873765FAC542ACF3BC988693C547BAC793FE33994CE686578051B8FA1
8607195141C582FE8DDC059ECA3DAD6839B597386E852EECBE1E315834B81053
D2F9BCF1CCA6A445A75C92ABB4411AB26F33DF25E0261F34E5096AE4D664B57F
8BA938A19734389E8677FF96105DF203CAB41F0E6C48E1704F311F51451DD607
AF704E6B41B6AEB440DA475E13240445D46726A6D4518CAFC24FAE88B9973536
BB9572ADEF166228948D362EA5B8CC2E4FAE61EA1D3E2DA8EF502EF888B7009B
1D9392005B6AC9BEA869A5C6AF8470D26527E73BE19DD38D41032160BF89FE79
8B0A5928F7CE466BBDDA8186563C795605A3372CA1DAC1ECB83AEF8ACB06C797
7F5BFC46D8F8D6C5E131E55AB411974C623C8BA08E65650BE118AFABB215616A
F611C0D7C1A57B747534B3EC85C1A110A2BF59612D95316D7B5C4F86F1DB7BD3
5DA951CC34EED3EB3772CA6FE435A2B184752DACE1A3E8298420C5F30759DB10
DF069DB32D4D817D360A37160DA58A53A5EE9ABA1D5BF00773410ED0F0CC4E77
F6BBDC352DDD6E3A3EE287FF27B773081D6641E31E91520E8F904FF4D138518D
D564140AAB4C9464AAA1DCE0E4AA6C193AEA970F45D01EFCFBBD18095983C739
ADC11FA69DDC5020CC3C14EACE61BCE6EC7A9C59774F56C391CC4105490C90F3
EDF580FFF16F3C96BCDA367AF9C22A2B3DDB491260E067DD767367DAE1B6853F
7169E855D69DC9212141AA5E0D9097EEB91AF7DBA14E874D9930B9E0544CA6AB
5B87D0824E4A4E81527F6BEF9E5CE6DC91D4F8B7800A05DECB300CD7A8C38D77
4C12DC3A6D525C496D39AA7283D43FD9ED89B8919A64A5799B7B47C02DA468E1
B1405446D985B9E75A108B793358086FF7DB1FAD380ED084016C2559765AA37B
A1D1CB1CE6A2F472BAB2F4AECD6D198EBA263056B5AEEDFDED22B2E774FE80D5
704208382313C7492FEB4701E7EC125752168DFC95D11A95F2A231EFA9758605
30147A410B9C2B71C7313D8B9CB50AE03AEE952DBF1AFC9DDFC00BE5437460EC
E5F073B6F1F63A92B60163D42E603DF5ACF3882D91085B4E047C7F92AF746181
1CDA6D6215BE299711BA9543F0A89C4DF01C43A24BFE5463C9619F0CED1CF6BA
1E216D1A74EF9C325E5820D3C9EF826C2CABED7697BFABA39D0F2725E0DBA7C8
CE305DE7C1B59DC21F2610CFB985BD9A4913F440E3EBB41BC6D5E3D3027542FC
60365F3A29A6EFCBBFA10436C2670E973829FA6208040EB9BA120D8DB54879A0
463788B5F261ECCF0412977456C26E96BB76E360801E608E05496BE7619B8C69
F42E8A51F65DF4EB0148F58684E8DDD4641B79CE028D512D01BCB54C2D535A0A
6A48E0941628A53EF7B1ABA776139DD658D343B6CF3CFCA0601F87A6CA100541
6A0273277FBDC2CF7A4927D841354301EDE00ABDCE8BDA33BDABC8DDD11BE570
572282F244A01498B59AAD06E09E5F1FDCA19BBF1E1FF19BD0B3277A85DEB406
2E5D6F6EAE1E4DB410CCC9D2D48091757130055257815D95644A1D850C4F814B
77D3B6731568486D5A0CD6BB356544510E78A15B6AC074B7425C2118FE177FD6
094EC7065BED405254359E2893B59E81369BBB557FAEF2B8883F578DA553A1E6
04F5C5C0F1B1EED3C5AE4E1DB6DFA510A2F186F01DB13E7E6749927473B30C64
6208922179B7EDF555B8513C364C054BBF7F35F0B627DDC5FE2AA948AE738D5D
A7FA0EAFB07C28E80FE1BE4890F4ABE1BE8433E01BC2CF623DB3DC17E5BA3907
257B07761EDD4E519CC813AA3B800A47BC4CC6B35EE6EEB1428D26EEAD4D6AF2
09E9298AAD42D9AB73076F309317F7FFBDABE56B4CB2B3406199E907FE5C491E
DD336C6F661DD25A5D56725C74A68652B52AC4336C801C993E8901D31F55B80B
AD84A95161D8D5634B7599362FDC9BF590AEE75706CEFE4F1C074E500BA9BFC9
08A2BAC4B3062E37B68DCA401224AD70C2B6E0E88750BE13E67669EB4A632B81
D1349A499C555D651177B3D358AB127B6B6C6133A18BC4FB8CF81B59685BC660
D7704664695A83680221C6397E36FED579D5E032B6BDE1A2038CCC141F0E9803
BBF7BBDAAEF0CB18838049F20E7ADF22AE9612796DEB9138059A4C12D55A7C46
1AA87AABC56F78F0F213D963AD955334B2DC5BBAACD920CA5BDF2CC4DEF46FD4
A183EB07660D60FE46E0A2117794FB0DF0D9E564C44EC932424FC707DCE60851
AC5B38469000FBF31BAE9CE8703754A099D21B332D3D541EB5DBB042B02CFE90
432FA7D98B533F89DB0F20F2E40DC78B53F3E0B671098413E318D9A0B75C53A9
D701E46873264F76A5963F0D97E0C4887DEFAF1A5E501519AD75129688E11519
C333540AC42F545EA9394332C5E710F990C5349F494200A88FDA22E24F5D5F7D
F0EE62F624E8A5821F6CC8CEE36C5B3BDDCB4B8EC7AAF5620F24EDF4832F2972
1F2965759EDA7ACC778D03F409DEB5776DAA8B00CA7BAAAA548D35CF0F04AFD6
5A7E44E10522154B97F62FAC2F2E1F29EF28B4A46FAEFFCFBE7A8FCE168B55BC
B1BA6EF9ACBAAA54A7A9E5DEF03CDB67F5B2561E042169E60B4CBF586E6627B5
968B5BC6C000DDBB6C7794E521E1447DF673F327C0031F415662B8F9B088E4ED
CE10A4E1CEE9AED9F9539CBC513F3E0F7A4AB2C046E86AD607D2F962729B4543
399424634FB48450848F57948BA3817DE8E54F71FAC584426F531F4A3F9C4CED
BBC7D6BF5C653FFC1EFEF8C0967AD886D051CE75B86858B14C7F4FB795EC4D08
57AA5D6620C95021DF41F5BB6EAFA20FE86DF13E7C83431A4CEE4425C40ED537
AAF7CFCC0DC5B4F3268A8831F3391A7B2A17E1A8397AD52F6BAA8B00CA7BAAAA
548D35CF0F04AFD65A7E44E10523C1962224D4E3873D2DD75BB1C61281E75298
D261EB8217E7E768C6A31BA5419B360E7507D2AE61A10931C5E43C0A6BBA324D
ECB086CB36468EDC8CCF17E0FD80252B8E2BF57A32D8575FF60CD63CFD0F284E
3EA3060284946B1CAAC1A9F7E87DD609A40C735DA40E068D61F2BCC6CE381D53
4A63B80CAEACF1E3EA8C7A9EC5C3EBD316ADEB5428ACD8ADA7B3025203AAB593
E649A4BCEDA32FB80522330F6BF3ECC9C1DF3A2971677A6FEE34A55080366375
8B40E87EFB947F6EF31DCC61CDDFC39A2771832899B68FA387BC053E36BBF9C0
955610BCB009883030DFD9796C8B7268EFE5EE6B0CC0781AED1350BEEDA286F8
E360F8878D64D0B7F7B09CA3A480CB24681C6A11FA2DE128E0B2301D85F0FC49
AD0DA112E199447E0C516BD22FB1877C6951F86EBEAFE1C5725C894669FF44C8
BAA45E615F5C4576F6EF44CBFBC583BEABA6A577651BFA4DDE5FB8D395DBC847
CFC3AC4C36967A941825BEAB6AE42024E2398DD99A002C512A426A8C54C902A1
EC331D1876A36EB26A2B905FB8E060AB87F85696AF202D90C75C9FC9E5E6BC6F
373161076941FBE23CA6E81B848B32F80EC449CFE000A0ABE41BAB5E0DDF8496
09B9D07458D6F11E951EBF31F8B1402F7362B2EA5FDF15CCC34FD35B62F681A9
4BDE6B38446C79B1116608A0A6190D8FA21B5BA338E60FB97E9B4C0A2D50833E
3CE505A453E68603448E1D77C0C11DDA2EC873CC2BD4C28604E044677F5E61F9
31B38C1B6DE01DCE214039661FEFE4192FD1032DBF325F3D9D68754782186ECA
ADB3C8E713340C110AD2F65B2A9F922A4995E083622B36DEFFE1A6AD802B4FF3
3B487C130D8C59F8E6BC0A3D6A21AA60543F3470BB4B56087B5A8B43DF3613AA
AD505CCA785EE521B5D5394125B91BEB6A6961BC58263EC5157743FF649F7530
9FF71518E1F8970A1B973B06531F2049D757345A692A4AD8C0ECA1BA3C7EE429
0F0D898BB3E404CCAA91FEA4EFBC2B94C26690CAC1B113237AB5CC03FC2402D6
31041E170699B14DCA4C4FB6B8A5AEEF3AF8D386610BFE936A0385CB856C1CD7
DE9E9C0848692C38D1E3016BF4B4E0D6CA94BA18CD5875BF2C0CCF808D15B325
EBED86B1CE396B32692DD1F7BCB905A78FDFD2C31E91F4374CD9C65057BE2DF9
CA920E1C9E27FE6C9D4D841359D93CC99F6BE58C51B7EF9795E9EC65F8E94472
02C94B089B61730C25FC0900215EC34D0BDA6BDD5326FE66ECCCCC22E976E1A4
CD41C1092F4FF2D03DEA8AD588BCD2CB6D686DBE729CE649F61D2F19A8BB7C05
05904A9ABC8CCC9C79105B0311D00A7FF64F31505AAEC9170516D38C247C25CC
94AB962B34C9800758D65160325837F8FADACFD56E6BFBC07247CE5236EB13B7
F1E8A15AB9B0819C35691EEC686E25BBE1ACEE7E3F02C7AC1613E545DBF5CC63
5700D3DB36230DF2369ACF7EE964D92D0989D89A115F38D9177AB4A025BC216C
928B09F06332844EA9D12718D359D7130ABAFB058534BF9B357739886C97C345
9D8EC0E656359CF1068CEE7B5E2928E43D4A764EF76A128CDB6C25B7C261CCEA
2B02606837B57B4F38BF32513D5EA77B3887794AB92226C4DA3F70140428B8B8
317E4E50FD905A5AA5F99198A39BE62AF7CFBAB277B8A66C8413A8F0E02CA52C
242507921E828D5EC28B1D352911A8E5013D3ABDB88BB319E6627EE0D7A68272
90F095DA482A4E939D739EE3BA37379887434F5384C56AA2A49D11A353D06C41
353FD1495B99CBA96ABA9147ECEF29D69BD30BA81454B69FB2082A98312322D7
699B0B3D7D502D719F1401A8136687788653CA9F5ED3F9EA7A85CD0B6B7706E2
6B3EBE9F8964D358AA76DE110300CC7B898FBD8BAE5D0394CA5162CB3751D1DA
C1B14EB9CCA7DD509D233A82E4A00BC42B92571D1CB29505E041FB5D15E78F08
4E5874876F5A6555C04D0A86619FA46249868CE8429DD021DC012C5ED5A9F1AE
7ED88340879B2EBF04DECC857C49BF18C6A839C97045B57B306D56772FFB7615
A3D0A3862090EBDF90624BB22393DDB90DF1D8545651EA77686A6B093EAEE6A4
764B47C15B0CEA5E5726B81B7983D251421A2A7208E3B37B9CE3F1D0C616D951
BA702DBBF98479FFAE0685C7C24E70ACB8564454277C41C28075A97B3A1E8C75
8915784EF5540B85A1ADEE63F53833C57685E8D6053AEC9EE2CFAD51447F0D66
0BF7CFF7EBC4AD0CE67BE2AF933CAAD62190D61C3F336C8E68585AB5F4F8687A
C4260AD77DB005D835B04DC328500DBE2E66A7D99648E34D0C2E929AEF3C8034
A681E5C185DB2E60922E29E38E430E37B4681B2FFF55821DA4B42857AD100D88
2CB4374636F2E5DB8CF80B65E415BDD44B433185E4748D9AF2FF244463C0DA21
C717E348E0BE63120324C9AAC1CDC69C59C2F18FF32DE52BCD70724C847F33E8
911530B16F0399298B697621A806390A311B1A71CC3A71B605C99257A9A09A3B
D8FE0C4D070656DA891F6B6C2FB139B61E70D397D8181B63685B8E94077222B3
39700B875F897183CC8BEE76B614D03022C8AACB0B1C4C7D190C95F9288B318E
8D3296CFD6AE32E51AEFB4E69ECA97A64B5199E01A4C7B87E4F5D4EC84E9D21F
C68D0D135D3444171F41A35364E573321A926C7C3DE13338F52F2E71E2974B33
799F8C044D724E8463B767DFB1E92A0B711D0EF669BD531EBD40F60C2966E53B
67F590AD3EA1E36B3A5F7D502EEA7777133601A5FFBAAF6FBF423892110F5313
83137F464150D390E63D23EBF909C3772B458EEBB9C8C868FB6AFAADECA9158E
C9419109D47C0ACEABD08682342AEEC5762713C43E7E94884C06329D340EEB39
47EB97D8A5451711BCF10381381D3FDDBB3CB3324B58A0FF87059721A58539EF
A64EBE9014BEE383BCB285C6C51B8AF7CC9A7435EA85ED80D8DAA2ACAA5B048E
4975397263A6075CD4784CB7994F0C9F5DB86C3109AFAECBFC0B39F2C388F118
806FAEF0361E5A30DA786E599F7749FD436DAB7247513CACC1CB61153358E44F
4754A373364D471A4D7A6449D75188F3F600D5FE70576EA4213A57C016D28FAA
91548361B38A729CF1E6DF63A016E7CF731BED2566394A5A7882DF2B87935F9E
83CE1430E23E8624867731416D6C47683F3A0F55818B8E002706891CAA6FD71E
0A16BC974D8F0867DD9FAAD38A467B4BA8E67937E0CE583FD73A055ED8A33A9D
AE4C1EBF4A68562A73561500E9ADB8BE5D338698293881FF237E9135E3B8EB33
C53F89D5DD6407BB98B211697941A927BC72A7727F259B56DFFC008CCA4106A9
AF77D72A0D2ED22E34C167BBFBF36CA5654039F3BFDA83A6CD672E3FE980F10D
2F54BDA112352814FB6FAB913472DAB4547A50C2C34514792333087E98A8C640
83C6E51F0E0BF508297838FE0F223692EA461238FFF855A95BBDAEF679177325
A4CD326D18DB4FC12F7A8E9820207DF26473C9C949A2D11D36C20F9EF9B7CB7F
1D174B2E94953F541C3B84D4318710AACA2D0CBD42EB7B100B99333D00415589
8A4ED315B17A94559A898DC36BEF9C32BF4B4A49F755B02FE9651E92599DF251
D86352AE75019BEE8D81B2EA2D5BAD598281D36D25AC400CEDBA37A55CF4BD0B
77501160616E059CF0788A7243C3044621CB3E65487B72A54E204FF9AA7E8C9E
809F175E7E2CAC9C9DEA7496E7D07A5E1847FCAC469D1C54EEC2D12FBF6F0FF4
7380478B53FA21F87309871F31EB98F5CB8CE8F84A9D9617F983A5853AA3EE5B
4DF76423A7DB7ABF711BB0C7C703843BB4FDBD59611EE6AF9187E298CB7AABA5
8E3FB5B4C7E86616C3030FC9615F0DA4B21E7AC862145E3D814E7817C6B9344C
1FC50B246A7DC70C99B7DBFADA1E01B81749EE49A5AE34B5F744202CA584A293
F65B0EB3258C71CBFE3F8A829042B28DE5BACD422A27CC8CFA6819F92BF68422
A9B0B3407F1E7BB6D8AFFDC6C6849C9019819639E9CD012DBC7901F18B38FBFF
69D3FCB65A973610C405074CE17A7FED134379E63D9D00667CC3658B3E33987B
E2F53581E4C82ED6B9ADD6CAF63EB65E0288B9FBF074392D444D3B3EF1DC48BD
8BA01A6D096129CD99FFFD3CD8871E70A2C1651CF31D319EC3E946CFF341E7B7
05B7CA5811FB3AE9C864BF35AFFF004977E13B9EC65F0D6EC848B13A2EFBE54A
90B12646B3A5FE44632BED79898DE54B5E7327D81565EF1E13AA97507A9841FE
083B062CCDDB62122EC723699FD4A5BA72587E32274197FF8C194008BE315565
1DA6117D663E34E5A7DE2D3AD36415EE85075455FF212F5FBD689E5FDC0BDA7B
CC4392158E21E5FF567EE23820815555A1051370EFCD4B0586BD44046D11F49F
EC23C82215284C372A8527186EAAC064AA1A5B3C76F5CA3A6A9E43A0310316F7
8211ADAA1AA9954C8C41A3031B8CEF273808B048A910329044B0344247E6C405
F0B89D377D80FCCAF634AE7A1D21B652818AABE247C5D564A64396872F925598
158F2E622588B3F477531712CF5BF923C12C1BCD7239AD483C23383B1BF96521
9C6624ED59AA28B66BCCFC7855461372B4CF5400F4B7BCF0DF4D5DA8D1E0553E
0BE93F884A17BBB0741AC2E477F3CEFF450EAECFE4448F77D161F6228107C92B
BA3269401E1391B35BAB672AB65D7701BE2C4206934FBFF4842330E3290BE15A
FC6D052F79B8FC23A4E6FED2DFCBBDCF4A0C53D0F676F11979C7744E54E5B008
8835B64AB5BD2CFB4791295C531C39169D02359BF7628F4CA71278FA389AE6E7
3CC759AC64F3CB8EBF8B5EB56F41B247F3F1926A87554A5389129C3D22C556E2
F6E624ACC2B41BED180265A4F8E3CFE795F74543F4A0DB7EF982CA4194EB2D9D
006C4034B5A2C6FEA57D50A9ECF4529BF907C09445BE82D584E4E06BCFF708B6
DC29E0E0E03461C073EA8957849FC57905F16D765BD449CAB4455252955542B5
1B8B4AE61E425E2305BC90F8BABE84F9216B8E07B7117CB6EBB6FFFBEA22D614
56E974626482B4C2BE49CDD56D11D7ADDDCC7E8ECD80C062934DD81F3DA85863
D9936CB0CCFC0636E1560409FD893C6DF3CF208C7CA7B20F2F430A3A2E265AC2
F21881EE4A59FF5C5FA95025C49B0671CFD4875DCB885EAD2CAB2644F1E25DF5
F6EF5B5ED3453C6D499F60E7C6C04DE9C117345C4E51748D3A5C548CC2F79B36
8EC29ED24D1FB73E374E602D71EEF218C158E9FFE4B993617095E813169F6888
1E5062A25F890D264992045C0A486BB5871AD692296D2D69F6CF1E9FE2250D93
A43676F2786D00CD23C6C8A987B9724E973A63247C002B5FCDC1B9E7775D3F36
5C784524E0BB5EC02181F74BB4FBCDEEE2DD064CE344608BEFC72FA3BC09B33B
71DBE23F815D1719C407877232F76B2E69531BCE086E68AA8B00CA7BAAAA548D
35CF0F04AFD65A7E44E10343B5FDB477010C1E685F759A9F3F1B4B2CC627C779
AC4FDA28B51BC4CC20850F9E1A5C5856D41D8FB730E04E985A65E218E892C350
FCADB5F66EB82D0813EF551EF70D35CFB392DD377563ADEE563B6D5E8E7BC1E2
A438F287AD57350AE15AB7B12CD019B4AF7582590C7498E5BAC836BF258EF484
3C39EDD64D59FD94E698D0A65005A64C1A64CB5483D7F51523208644416D6FA5
F5C34F34EDDC31CCD08D89506CACD8323BBDE8EFF318AFBA650A3E71A7252CE4
82C82696E65DF2DFE94B2D54B072450D206E7EF5D8ED5009FB809985FBD9A3E9
9D1D6124A3B4DCFDA78A150F12EEBF5F137AEAF15A3EEB91741098C5E479C412
19563BADF2CCA50EBB691FE3A66334F85FAFB00E569CBDBB8C1EC91AC0FA666F
6A4161E6593F9EF189AC386B92C7CEAB400829E6F649EABAF8BAFA31DA0FF2F2
B7AC9272B3DEACA29ADB69140C90980A2147208D9ED8B77484C836CA9D440461
EDA1A481E70851A8F283381D4BF95C85DAB7A4BF4D13E49C8348AA90CBDC3D26
2D77A6EE9F010E4C93C08FCDA085657E92D98E9B33E1A7F7AC14BA3238EE2291
6DFC64E9156B8CF2C80FA084099C33EF76316462C6B8077A367FA8D052D2E47A
9725E9EBA84736A40AFE69B70251CD50E673DF9FB84B82423436384650DA926F
24CFC1AC7172514CF1F4CC942F4B9A4977BDC2CF7A4927D841354301EDE00ABD
CE8BDA33B8B85904A5355BB9C6E760AED8929A4EED593836DC944DD1F86D88D9
4B5C171A294A2A8C263248327955365280A8DD45C5C52C376833CC9C07D19BB0
8A569FB8D2AA1C120D6162D791D759C9B9E9CCFFB119B21C90975F74D89B31A3
DA1E51A3282038BBA7F7FC70987A57EC73E5A1B46F56FC3F24FE6E6EC301C670
028FEF178AE85EEF9210696F1227D0D8FF71335393E9F72BBFCB7462632EB14C
53F7EC4217072A3830114CBA94158FAC11D76E7D11C9A74FE2BA8B2BAD7C2F67
0BD9087F7531490409D0285304B9D77727D38B9EE253F31B94C9AF9270C53B5E
A397B5BD50276F8595FC6E2DC97AE7BD985281BDF4F0B125C69E77CB6A755035
B1B05F1C86833EEC02FC813144F6D0438AA8FBA3B3C81B70810EB0AE50B5A2CA
87320E7B15293F790C556572C54BA499F49459A9E1106658A2B8573D140A3B95
99A6FD7B8FF7AD0711E9D787E7D4BB47BF4BF6A1ACA730BA1FA90C0D7F09B3DD
6A5FE918CACF2751EC633967352C75105A1222751EDFBB3E8B729273FC1DB0E3
644BC9E155CC43B0320011EA28A2E8285C5F175FCFC898D707553AA90560AA32
BFC1FB1353D8E46119630615DF446C732E191427FC63A7A675AE7AAC04FF8DAF
325E7F5EE733F3C2D65261C9D49C04819363FE726E03F85E5F63F2AF356DEBC9
B8AC407FACFEDE39B4012AAC23A64D229B20C3A1C523C30989A84AFE175512E5
56B5BA050515D642F58315226E69B7474CC8C2A7921D3A6788A63394620FD26D
C2F0CC552970E810A59598A1C29BAF4A52AECC0B4DD9E4F69244DCABD6AC218F
2CAF82B3CA9FE596E3E06D3A0BBAF8D573AE8C57D74A68E8CAFE567174729871
DB241BB193395FBB84B6207B0056B41D7F30C87B3EFFBC7AE6E8F15B9736C7EE
6707DA2E3708977BDCBCAF0CCF5D22E677FF4BD649053FD29385EF839EE18DD3
01AAA69044E56DCC291482EA4A2A2641F24389976428984A7DFACBD3FE28A890
3CB42EB0ECB21A09A11D6366AF685F88D99F32705FFB5C319091904AA36EEF3F
6E157210A3A46A4A30114F032BA029D8207F5D9D69657AC718C065A32EF7CA8A
1FF5880FC66196E4DE15994DF0B518A0D298CD90EBD4E3E557E8C310593D8237
5EC126389B241DC1AE3345F61A86AC19D0E07BADA3E70089B083C0981E6672BF
242C795709B94A5C778A264E0ED237B4B11C13026F22141C8066CC73A81A3CD1
0D51EC4A1B3534AED1BF5FFA24369E7E0D0FA9AA9F2936BAE60ECE3A8E7A641A
6B31F690FBA20BE21AAFBE50B7E039A8130A85092156C4935172AB5DE06DA98A
32FCDCDDAD875B47567AC68080C748EDB862C0A6C727086CAC20039F25049A5B
40AB52A3B20DA3EABF2AC20ED008277C1B6C547F343EFA35E45B3ED72EADF55F
EC187ADB7FCE2177C42833E82C741C6CBED418D778D399A44EB91A9C4C30DBC5
E747614A3FFB2E1C81487287C8B0D110E468EC29A104D174729853C5AF8E3966
6551BC919FC3ED83BB4F19AB02A088B6E2F01BA1E4B0E7F3133327811AF3B4DE
C869AF4ACCE0C95DC3D46D0719540D30E92385C9826EF2B43ED2471495C66E9E
EC52D41E5767E1D93B22274E4702B9EA26AE7D8C89032BDF6C594CCBD796BB15
E26398DD34FAB24DCA5921FC382387ABBCF9845D7927EA76255F12BBC3799D4A
7621F396954734B7ACFF3C578C63E3F99E873F4C5489F1167B67289839310381
503936F0E1D82E7058F9C965394F5C561F4526E3CECDDB796523FC0C13ECB520
7BF396FAAD9EB9CBD460A7CAE598EE64F06F7FD330C000858AEFD61A84F3AC4D
C872797E4C746588E4F3A5B032AF0EA3D1A169879BE593DC5F5DD41B7FABBC43
744BEAB1CFF05FE0BED47B33CD1A932EE564AC972810186782E79F47AE51B972
A21001D78A9A97D2774EF4D5FBC8032955669B0469E353895D9A3433023CE029
0DB68CD3E9FB8AFF9059D3EA7D15CC8164BB4CD6A36184D4DF1BE9D5DFB3269E
9FE971C27C15D35FB2D63518E33F2360022700959A62CACF59F19CCF2556E28A
2DEFB6371422CDD07263005CD5709FA46118072A9CF3DEE42A9546DE5EAD908F
2FC9BABDFA3434DCE5606D5D8AD883039693403CC04C9BCAF4B1BACC81E821CD
EE4EA302DE2830F8FEDE385FF9E7179A17BCA6805B9F42C9AFC1DA07D0FF5609
E4CAF454A85E0D79E3DBE508E13E38E2AB9862A7274F3F40A725E97E75405C41
56E7D7C52E491523D376DF77D66DE25674A8F81BCAF169C3DA5106959DAB4F43
EF9E9FBFD5E2C95E14CC42F2B97B9AA804752CAC204A804FB0395B1D67AF1AE6
44C2FF31014776B3E8C4F6CFFEEFD6DE3A2FD816398A08E4D6C40A823273E994
003C9070F96241E324DBE45F66E1F2593276B50E8533F8CB88ABACCB2742EF7F
6773DD8865845DE5781CB2CC4EEB65118457D5C4E806B2A97ADB2DD5A9F66C4F
858A80BA132F82878404BE7530ED3C75ADE48E05BC7F9D017C47D030E93066E7
037B56EEB030D9876C2EEE2AFDF6AFE0374D98B2323F78B85DFC45D693297457
A1E355594694E08755323433112BFA869BCC42391DD5BA873F2E284B92AE04B1
CE197787DE3965A46DD37A4833D7FE0477F9D29479B5B0EADD920F10641C2F7E
51FAE541F3A3FC4BEAC900A43B0115F76BDB75E9FAF644E1879C37A1E1BC305E
1DF5FEC8E96DF0029E23A2322D1F33B4FAFB0B9F08AA0ED55F322C1E6711E1EB
2AD5B026BB900DBCE798C33144F27E9D81EC53C9FF34EF0FFA52D0E590742C6C
E0443320319F7EF894A7F3A6813B87137BA68930372CDD9ABF94FDCA0141534B
718F320F4410B4BA74CF740D50D40F1D001CB9C16123785909B6EC43EC386A09
527858EA8FFADD2778DB2EF1C5A129EED8EA57270915680C1610576D93988FC7
CBCE8F8EEAD3467912FB4EDC1C8E833686E124BE0A5584281A2A331FD0E0213B
E568A85AA2409548C3FA699027E429190812C3FAB74423BE19314E56E729167D
4AF5F318E6633942215F4B50EE1F83F9851AFC7436DF907A37A92236D9EC72E1
35B71901225CE9D08F5826A7B2D54672BCAB4127AC822CBC7815D36C13CD7CF3
DFDACD2F39C72413771D23B9D43D833575AE2C9C6F731D119FF3EE0E30C3F4E3
0231E5B98B5C8E1C9388867DA67DA47F1AB1477AB327556502CA8A2F7A801C7A
FACD58F93FCD83DCF3EF58FE49B5BC2796146E427215C73BEEF20E828A46681B
6BDCEA70538E2B22AF63B0E2FCE3F56EB509A17998BEAD9A49E21BBDC5D1E325
C4F1739B462F1998B2FAAE8AAF211387590F98F4F66C7DC21C2259DCBC688CFD
5AB16724B2046D850581939745F9D5EEEC8896BD3E465AA29E75A82E99445F10
907355E926ADFA5757E73CF123CCEE639A2F092F61C4D10B1707A805221A03D0
600F5E53BBF5F02A636A90905DD3ACA41690216DF0AE3DDCA1D950E0F72A61DA
5312AE94EF917D9DB15696E17035899FDB03EBF076E8976867475731BFCBF779
93B27F23C4B9C008524E350A869DE9837D710A56F1A2149B53BEA91A5C184A53
BD9B2A0BD76D2FE72FBCF8374E8332B98D6953FFDD39D7AE67DA3476CCE84832
BDA1B6BB5244DF4DCD65A885318B3E46432A10622EB5330B3CC94DB0901AE1FC
5708D79FC9391448D296F1205CED8C5111C7471C53D6AD49DFC7368B0E9ECE17
6300D5B23326DB319B1509B69E1EA1A87F8147A3419672873E34D817AE1624A1
4774AF12621CDB854398BA98AFAEC951690051A2662DBE191D19D1959385300A
E04616F5F1B3D17A679A4A1BC3F5D5E5370CCA074138958137890B429EF87838
52003C1DA103EA0E1D2C04FD25E683A456DBBDCB2920D6F01EA7775EA5555DE2
2037760E878D2387FC601B0F7AFBD5776FA36197DCA8251E0247C73EB0DEEE2D
88EA6547944798DE488538FF139A3634BD20A937AC02B5759825CC4836DD01DA
9F7EE55FEFA85BBA0379C647DEE470AC8ED89CAD4174D7ECAFA29CEDBFBE966F
9084F8AAC3B30D487789805A8A90E50847E966EFB1E8B20D9DE8A6076BECAAD2
E1CA52B6E1C0809C0D880A77F3267C3EB92C467C978B77A6AD74EB0816A7ECB7
2B823651480B10253F9A07FB6C39DD67E64A9DBC8B20E2D9758C5A4B6F6ABA7B
8E3203B60A8DB832ED27813CA3CC5D0893049E666977E1AC513F8E680C0ADB58
B5D14B64DE244E3A916F3EFAD1B4BF55BEEF99C69D5B8A6F9FBBAA80881D2272
C1B91FCE4D7F73D86E1C4835C3F4C356675621C407359AFD5B11FCD21FB76FB5
ADDE299C1C40BA3D3A9D40EB0C74D85D7A681AFC3A4B916D5D1D26E01CED9B65
CB5C4BA4EA98919348B65D7C5408B2F9DAA717918F3E639BFCB029BC5F8FD938
23CBA9C108460D1708934A263F030A744D9D8312437A01BE51DD453F79B9B761
E959392226C2D9AF9BCC1208EB58846A1BC0079E16654C76E72A1E10C8A1956B
E6ED6D88D23E7530C2BB5B2FADC5B34ADE0644C0F17097633B32C3C2864C63C7
68C9FB963D2338E603449EE12E4F8503DDB58EB2B929CE53EB5D706ADE5FA46B
D3B870A4F0B931673B3FFABDD2E71CDE44DE61906A2CC901EED77A820A2933E0
819A4A08556FF4FCC4E1A61E73AA3C0C6794C6CD86241BC19594F94A8DE78AC9
0E6E0E7BB44031E45401AE1BA3677DDDA1268B57ED2EFBB4348E3B7733E9F551
F3D383926C91077A3A199C3BC282EE709958758A7E77E8D59385AD7A03363FB8
D0F126E3279C8CC2A1AC7D74D3140B3F790E16F41F33C4446DB8D2C57A4455E4
92C6839B85A90C23F82AFFB57F98048267D548D3AF4EAD2703F57CC0F852D635
4F0EA9B44083773A8778C8C392A02C263614D142436C0FF38F25E56ECCC94EEB
B414C741759F68C2C9292B509FC3F79A01207F9068D0F31A2535BAF0751997AA
548B74B2812D6097457FE7B137C7B6E64620932E6F45639BBC6FE01F558D7B1C
1756F77E37143B2E58225D84934141A0CA89692080BFD5CB7ED892F1A55E037E
4750E6F3CAB9CE75DE3E1E2B7BC4256EB11057091DF68C3A9475CC0A3F8F2E4C
E787406B150EF86658192FA1983400B8098D8DAB497FCC5E9D40ECBE61033596
22D14FC3F69C8ADA7319E9D3B39CC6596E72AD89C4065F96A901DB572DE9459D
C7F8B8EF64A94620FEDF8FE3B50732ABFADC80358A46504D353B24A8C0393E55
BF723DDD805C9E53074450F8A33812467BF86D9812FF3FE7A7DF7F4EE6D26CBE
FE4051ED7D69B44C70AC66CF3DF17D3CF98B3DEBDB1537BADBE914004577EA5D
A2CBD75E4BB6D0402E35CC2128964E6A5BFBC57DD17DE791890AB3D2AEDDA5AE
9236BBBAF92EE338A655247C509A15137CCA237E1C70AF1EB768172A64407438
5CEB223A00792E97A73F3E752C17EC5297560CAE3D4F9AF58FD28E3A1506AA00
6B67515E7DC8B3051C0CC267869B99B7FC5B8E1255B0EEF408692DBE8F976F10
2A7B17E6A41C940AEC6743FCF2DF30B552AE00FF344B651FAB337C3EAF5FEE2A
A93FD2247029D55D9FA52EE77AD9DA98CD07113C4269F06F393AB1B9A7929619
046182BA137376364BAA5845DF9C7C6A2240AFFB2EA9963FE5DDEB36BCB784B5
1270EEE16B0138C1732A5446F9BD20C75EA72EF317F76DDDFA3ACC3761B10C6B
F22F594E2BF5BA8160DABC41DA079DA4A751DF9A6109796D1E04250C71E9EFA7
845A3A760A507B3D3ABC525B35930A40E56C60AC958FA48884514D67ED749829
CDDB1A19CF45B13606CDD71FD73BCBEE80F9260E5103785ADED2F3CF7A260A71
95F7AF2B866706D3129F30B2EAF83EC645DD3EFD62C1856D4F9C04624D6EC212
F60AEC17613BB8B22F1EFB2E413C5B8A9D4DDDBA2F36977D7DCD80D98BF09F24
006F2F83281B0E9F6BD9FACAB305D9C4587AC495570DF9C4F05525921AFF53DC
571E860E7BCED72963406AB7949828EA0CEE71EF3C3DDCDB2EF0C7CDBDDB4E4B
1C00DD48B63E5D81478F2099228D72A02E5767031A97CA61EDAAE14033DED0F4
8D30919A6570C8454A7A524B8B96F957DE4FFB2ABA1C5CE683665B63969F8111
73A45C8043FA363DCA07A101DBB65302AE4434AA09AB585910ECA4AE5A075952
3FDE10FE7C733167B2CB7DA20C340ABA91FF0B3C92679836AD14A849E99BE972
80ED370D6909828DE61CA45D55796D2D1F4A466D3936DBF7D6E0C043CD6D918C
8C67320B2CDB020468EA77EE29E32F04AA6678579818D3B7D3B0C386B40457D3
C1C200483C0CDAFE837D984A761286C32A7911ED7860C0DE22AD177610374D18
2906892912AA010FA42D3FDE9E9245943A23627AE0C1C34B5E6BB1567FBF2792
CAA514C17D7BB7A7D771D82CFDC6B6AEC0528A0D7D8F6A71B1AE3A9AD28AB664
4262E966B90DD33C5749BD8F64636B5B445AB6F671FD1B0F4E0943A307EA4FD3
08B11E86F0295FE2F11EC5072CC71ECB1F18E7FB89BE4DC487EEA6F51C0407DD
77566A98ABC1F114FB55CCB7F525B22C4216088ECFAE8348F559D6AD28E47DE6
25B32A178A1E5DB965018AAB7C7884EB7CB4542664F332111E755A0BE1E13961
AC5E792450118EB34CE7272D565BEF5C30D0D95AD2C4152DF17CC62DBA537481
361264012774B971B5335B8C9AF22A4E5107D30A22585B76AD6DBAE38E1928A1
54E90607CE1666D70382E470653C18795D208DD163A3CA1D6A8C6C902E1F966A
F6EAA42AF8024E4521C755D34B49654CA7AC01EC0550084F470D380CA22F253F
E4E3D1E56E432F655A8C234A301667B029ED2361F11621E0685107E8F6B2C78F
8C9B34FD5DE2DF0453B564B8FD5D5C6FC917E2A4CFA8FEEAD0D314F28437C23A
AD69A2261B830C573B4FAB0D4D6E8DE5D386954B2D812C79685B50CC82EC27EB
73678E5B5255627CE1C10A5208B79296ADA063CCADEB49C1ECFE87D244C98BF4
09AD9849E448BA9419ABA398611C591B3D22EF0D3C22C0851B12732296C2968A
1F5630C9DE1E9043D7770D34A557A0F474722C2C0261EBADEF3B9CC4DA476FA0
146537CA80A39E4CBD884D4994A7EC9407F5280FE5690CC799A0C53CBF939792
B6CD340BA06E12F284DD1B240595031AD093863223BDBE2E7116E4E76EA817C9
3F1C9D952E97FF3818954DBD2C212D2C708E9C9661587C8EA6D54FD041E21EFE
2B0B8A550B4264FBEB14FF75816A9554F1A93550231F61DDCAF0E017BFE85B6D
D84A586C136832E5F75F132B6A53F75178C34050A73E589E37AA96C2DBEB0B86
9F65C3FDF48CEC7CC4D67C9E0189E8AAF9E39610A4D1AC3FBEA713572153854A
1A60214119B246D3F84EE24C324335A233210FD16C0FC15C0DCB4C59BBAE3A0C
3B766E84C51A54745230611A6A981DB0C6D6509CBD4D31E445F889CF7DFB2BFD
F274D3B5576966137E9F90AA3CBF50D220A89606529FDB1612F916D7D98F1586
35436B1C389EF061411D5FC5F84919BCCDB3307B66CD235CB33A852182F07091
5832AFA3EC736D0817B185B2A8346CF76F4EE5689161B6FDDAB8B81B824DC700
3AB2677CCF9220FBD8EE1CB21DD57EF15DE05E87656285DE6C2D23FD25972B6C
FF816542500B578355CE1F9164BB0FE39FBDAE4393786668E6592563A03056FE
1C18E6232BC798A67CDB5B123B7FBD24DFE37E306818D06A0B4EF2F9A8AE8711
D1F676074355F7FF6C557B3686D801E54EC5ECEF8AFDAB6C9B5D06C1992CE930
EE2913F287B3CCA268A1262D2D20D6BDE27B65F9176558D8B65362F61FD87D9E
152583081AA9C0D030F2F68C456D8D4783468BDDA5A52030BA86098F4360BD8E
9C22809ED735B14F5999CFFD8D9A7DAE4CD1F08DE102B90DB6A4EC11CF295F29
F9E2299B45250A5F173FDAF4DBFEC49C4BD13F3F877B819434E200FFF0DD0E06
04021508FD510804C0B087F06E8E01DE68CBC124049EA103CD8FD9A327892579
00F952DBBB63C0DA21C717E348E0BE63120324CF4516AB5978361D83B9D6C514
372866A572B31491F9BFE03C54B529297E4E8AEB9E349683FC5E1C323236F713
380589D1561CB28638D1D24AA9F358AAFF93B9564AB263541BEBA4F76A0AD5DF
DBA6EC952A4F37948B632638D3DB7BEBA7169F949B08254A985398CF9DE6AF78
7596721EF38563E9D926F0DA88423DC2849432C1F9581426AE558E28699AFCFD
F239C4EC85164189443C8B942BE7383C7968EB23FCEBEFDB600F32176D7B74A7
89043C99F86CB893EB99B30DB6A17247A4933190AE49C6E1800E87E51A3C78C8
7A66B65D42F0ED489537D1742C966B39338717556C1CEB5AE1792218398B5E53
7B68A693ADD2F86BEAD5C3BEA1E7044636F7D3BAD00C9938DA2463A0D8BBA017
2345439BEB39CC63FF75EA03F6F0D8FEE52FFBF5FADA219D372F01CC90343FE1
258E92C87FF224608020465A89A138C36E12ED74B2187B99D5F33DADC3DBDABE
A0463236B5BA83B2B00D405B8A4371916BC8467E52CAA82CBC29FEDEE39359C3
51BA8960636ADF062E9395A54B5B078DBE76729D694396683D4125C68AB8F0DA
6C6B0C9E7FB298A96DA2A9D4F8E755E355D409355C8475BC981A6EA85C135F60
246D47ECC90571044E7021E837322BBD43CB8103899EA8517AB8C18737EC2FAA
BD1CF1E9F07D174E63681C9719E498C62A7FF00B01DF3770D6A1A408FCCCC97F
38EC859BB4944602BE875C0E8D3FDFFD26C6E56BA3356F66D123C08884E9D27D
C1FFFC23D37267923863D01C1FFE63190D1344EEB29C657098911E1CA2BC3AFE
8C6B334A0F1A3D86FDEFBF8AF5D5D6E8C2948B90735CBA6563D9CEBD551BDAD1
5D0926EA67634AE6923945253F7CE32BF20587FB74FC58F85457115EF8A53DDD
BCAE30B6296B964C56A1BBD2139CB6629F6045EDBF0CEF41E2E467ED1518D82B
08130625B70FFD8AB8C19134AB3C692C6647FAB3612AF3AEDFDA070646866810
52511C02B6F9C5319E4159C386DFD7E08913A1DEB040C9D6B45614ABFCF417F6
FD17A704C4668F6F80FE7183A85BEF5F37D69CC9C71C59A0D0F33022188CAED2
651BB032EF0F402ED81971E9FC729AFC1E778A3C02D451ABB27E42E2314850D2
1041D6849F5A34F0C817D11E7A2D12BC8A17FE3C89841584D5BF8D58CE5E34B9
0BAFD0EA873AC7B461E0FB63D7C1CE62B8FF3464719923D9BE0F6AE8FA7C6A8D
FEF294B4268517F1857924960D6B420641C34CE88E29E664C52A0266FF11B1CD
252C8F817E26FF7AEDEB09DFB0B956B404C74657B72A77E338FCE350379386AA
2433B68A3510F264B4303C8701718E80FCD913E47C201A652E0439E4E2B2DB67
946562D76CE77F97C2D7019C9D7DB4E0B1ED0B680FB004DDC92734468C34362C
A0C6A066ABEA6C1D3B8F40238DE24F3028882EDC1813F4D2BF5379B7F894A8D8
22CD8B8115CAE7813C59664EF122CC18469B39618A3C477A9F53603751AA4C1D
45D2F5BD0ED0868159FDFB3820D02F460E2C2BE8AB9A842755A79DDC1E281A8C
34A969B80EDC94665CF250BF03516F9A12655CF331D1DB515A2389958D9AB73C
AD978BA11CE54869E036D6FD235FB2A7463F97E3613316D54B06D306390158C9
1859D80E77D1D2BC9CA9E66114FC0D2563522198DCE9D5334EBF0B3334E89758
E178C4B0A6EF719787B54D50258F7C4F05BCD0F8C12E369C5E7B84660FD86AD6
2D0CDC0F0D90E753BA5F5F5D93A16DAF98DB46AB898455AEA46E0B4ECD890DBD
9FE903A205E1854AD4364CB8A30547FBF908AE034E39B94B7B4387ABEAB4935B
D57F48DFDF2E1D79D46CEA668A62E78DCDA3D406E10B619A2FF165209606EDBF
EDB39CB9C38B939602D8F7A3F70B39F1723B8E668823BC93742336A93039AF47
F5F3FD6ED94DC2FD9C5DEB0ECCA10D00CFC5CF8008EFBE21C38F9927527A4AAC
3ACE21E27967DB357C3D53CFF50F602A8AC3DAD883BB914682D4EC56587FB36D
29F40182CC77187430947D4822017696F93390E9A6BC97AB3DA19F26AC6BDB91
166D0C3DDB2CBF1BD727624232DACADD76048FBB9B8B867BEF191661E65D79A2
49AA3AF74B80396D8E0239BC3C5A5C71F0CDED21444EE372BEA93ED3DBAB5C51
E5FFC0F527C5B59A59FE5C3360A0CC1C627184CABBB06F48159CF4EF8690A2B5
0E739854F19499EDA33E19A4A7E61F818AAF7966EC96004C09C4DC1D4BD26451
A9011C0DD80E0C07247C76AB27B55F03FBFF4D4BDFF77B07F77FB5A8C4458F3B
EC18836A23170A056F7397D3DFE330E77D5B9EE09D6EB5100F1C6B8836083522
61246402CE4E7669223B8AFE23F85D9165C80A576EDAEB5612C057F78D75440D
43A1842C41D9535EEF0550084F44FEB71A12F796E51991008C035118DBB4C2D5
656BD1E0EDCE79A00DEFA576E69100F0F900B7EFA3CEF6C18E250C971A71DCF1
928EA4E1E28B72A98CBF62733DC2B245AAD04AE8DEC82AA77763238CD15B3C87
C1077A71E5C95228114053B0DE93BCDA2430F625B825216A78E7C80CA7211010
D2C00C5BFF35F8A6FF4BBCABA506F4CB1434403DBEEA9845063F46A9EF1859B2
1CCBE65334A00D9B0A1E1F39726A99C3F1DE84BE542D263C8297C9E4EF1E184E
8C207262119E30EB552EA6150698545847359558542A92D1957A9655B657066D
662A06C89697DC6FF5E875146F413F4C42D8470CF5CA0A087B910D156A0E9BA3
1F748DDFC6DD534E96BEFFD58681E4DED08A4F079038F1B5369256A3180EBB58
B7C85424593D109BE9E648F81DA5E15F4829B608385C4CDDA9A3826345E1DA12
10EA3D220AC1798A5781DFBE3E47C31D0B5A0CB68D5150959FC76BCA004EF729
D9F31FE27D0F0A49AC4BB7C05E916482B855C4AB8922D15F84B5E66587808E23
A5D40F5C0FD27AD5046D4F42FE85CEAECBDF3FAA6364C632C8D32FF6CE9B4DFF
D97C21A534C8A75EBE18C09C8CB07D82D5EBAE9629B0275AF422EB5476C2F259
E6E8AFC57CDAC70C0F70652222FC11308DA39AACEB2C15E617A55364BDF80731
7E68EF2C3F555A3B98ED30070CE54B0FF34003F52A37C14EF4FE416F8FB3B918
C454BD5774AAFB2200D2DE6664E363591C86F9882372BF002C07632B5192229C
3D0EDA0F4F7211B5B5CC0A348F325F3E455317804DA3E0C4056032303B61D3F7
8E712948EA8D08BF273AD8B603EF13B28C716B660158F64F1A97556C0ACD8EA5
E53B7D2A9ABBA798E5F77B8BABBD1B13CFF6A9570EE52E86C5F5C03F8A6ED17F
EEB5A64851BFEEABFCD8CE36400B850BF08941113BB8ED5F47CDA4078552F565
3EF643E29733A82EB60B7458613FAA3A16579CCCB89FBF688ACAF9F67A36792B
A08CCF71A794F2C7E845FC08830FE1435AE807F6DEC449E88608CC33EB3C9886
A6F6B61F1FAA3934A14ECC4E6AD1735326F318A984E5B727D111C681DF8126C4
B4961B8AC6718F554CA3351AC9D5C2D42B5DC972A1D6E40A711C71048EA77A05
F8B383634B503D98FF2A38363D50157F6F40CB8387218CD94EF127847A48B648
FD0B67BAD60B23937F6C11622F344353D98F5E79D14DB113EE13F76C9D322010
950F09F9A3F4535F3093FBD68E47B44E64F2CC880FBCDAE2DFCF164BB944C5F2
27B5BB96514EA22D0B480AF0C39A12B68F330C6794A3CA9CF5CE74E8FED25F46
67FFDEE2AF8A30E836B33CCA7986436F25F99F1D1880A7048295A277AD1D4022
BBBEA0A9483EEC2E838A4C95D7EB3F7FDB5E41BB1C0A46FEF16EBB0A92CBCEFC
04FE252DBED89160E8CA25E6D7E6D032C78ED276B2FBAA515F68E3D13AF1E806
7FE8AD1D722E59AC034A14204D8D0EC8AB2AB23D244FDBEDE098610F35EA1320
D3E81A89D47682CB1FC7D90523FF1F61A7B893FE564D816B18697134143D76C8
B2184A53DC34FB9699097666FFF77EC8C0418D82F545A05180502B25155B73D6
D469AD36E150E02FB2831359FDB95792B2E6431DD24BFD1DCF8259422AD26070
2C4419860A94D0E467A9832EF9383A84C9326505FC5EF2B72D3827FEB4C8238E
7DC2D23B84832EFA3675F1386F3FA0700A77387EA8EC41845685A86E4E5ABF76
53D4E191CA3B5F623A44BD83E2EC456338E8D6C826EB32307A623C8DFEDA68DA
9A52AB8893079F19F41999337A57A67302CD793D3CE49CD8DE27603B076AD987
A1F6518873BB51A86316ADDDF3180B5F095E3A0509FD05553235A357D8A38B6D
ABA644074354BD71FBD1799F8C036E32504EA0500CF3F3EEBCDBFEAEE67AC869
A510A8DF541A7B97ADB149B0E8FCB8DC7BEBA7169F949B08254A985398CF9DE6
AF787595444D9E2292913C1B263584080805CE4CA9BA6A5DACD3904FA71367A3
547C70F2D1BEF5D7E42578DC39AB7CA8950DD6C6490988311A5C70DB60B784FC
038F6DAAC43A010DEDFE39D0B1B9645A3C1F584C7BDA1A1CF019F969BB5EC921
305B45B1B8FFDE2A09CF6301F485C8B7DC2F0CA3000DD5DAFFE353929EE33441
30879F2032497582469465A76F64D7D5EB49B35CBA7981059C65967C51EDC355
921FAB9ED7F964ED314D50CDC06341481153D90F43C39D106F3BC09ED496BD9A
79025A9683ABE4C7E6D07E269B9DFEF1751E7E403F5F91F911DDCFCED2D5582E
7A52C340643408B2CDC39081E36984C6535A4650B52D5819BC1DA230B2578118
918F9743C8AF888BD45F9FC470165E454BAF977E715D0BEF8A705040B707B2E3
336F7C3CE25BABC95D16C267C5E44BE01179F69EF4653352C2FB4B57406E6926
84CD10FADF04B4DFCBAA070620F750E5E5FDBFBB4F19F8056D808B6C3229AB97
1C5A2C397C3D4B3BC97F1CC3EEFB3E577C48B5548AF3978ED1A181E59ED9410F
4D901B9CD2061595FB27C9B1770D49EAD39029814C8BCE19DE1D6EAFE04776A6
E2386CEADE4C7BC4D54F94FAF28247662F3C670A75D4877A17342F5EB315003C
9E761163074D583A55C3C86E52E407C4EE4A88921D8ABDDC55A6AC76E7D03FFA
2A1F4EC1EE9CCB7D4588DB4957DD1E286D45676C9FCC9C894CFD8D31905E3CEE
76DF3204AEC1961F654E12385D1EC21D1C0FCD55B8679004B35D754A18A615A3
D23ACD78645D8BED6F77AB3C26FB93A62D5DFEA07A0C80C0A828A47BB081C0B0
D14E85D92DFE733657BA7C2104003CE178CCD4CE8E4C0E3F19C6C86A732C17AF
E22045975F066F1638634185A47D6D61E4785AA2DCFE9ACEB661803B1EBFE52E
124FA6F86A08DEE928C9C98B2EB8017A07E7DB640FE0D0D79109103DE0E095F7
129DC64B4012AC9CE863CE8B77C6833187169DC6ECDB5EB835DF7B000BBAB0B8
4DC68689F974FECEF9406C030BE3732916C975F583FC660BEF76C467D4F83CB1
60C170298E1BFF339F306505EA4FEE1E0A2281CB50410BDBEDF24EAC2B1E0F17
A856F22CFB87A3C4ABBFA39688BB222A81685006706434FFEF6D6B57B4911489
8EFD2472B10CEB31F4E58CC760BAF73ED8FDB28BB6EC98CAAFB7993BA7CC897B
16A52472748DD7FA3553510645FF66168961B7D66288CF36C97474DF1090F5D4
94848C43DC9560E46BE38BFCEB0FDA3EE2B1EB5271D03A38D11BF9A3E8B0E508
0A1994B7689E5EC50E92E27E13C4711484075AAD24C10874C856F4FDA49C6389
BB482A45530AD70630F748EABF2208CD8C7973617DAF688BE52B95ECCF029A6B
18A512D30CEB0B6ADF80FBDAD9626F7A1363DB3004BFD229E6A1E22554AF326D
DD28E97E4285B758500AC9FBEE678FB6BA165191DD7EF4B4554FF3679FD58004
2BED8B2A1EB380A4CE242F1745EE52FC3164BBF15FDF39AD407E8FA1FA323408
D17A9D3B252100FBD51A9BAE076457A0A9E830C0658485CA65E3CB09AE6042E5
8DAF96ECDB80756FC73220A36FA8FA6DF71F89F1FFF83FDB4A95D61ABACA8EE7
F72E22676571A7BE199F679AFE350E0168E1DB34653E0D0E1C8BBE36DD2488B3
7D87D724843E8E9B7858269BCBD1299848DB592943F362EB36B4CD4B0D4EE4F7
AC5252F4EF69BBA047FBA2599562C5039606027833484674C9ED2EE44D10C0CE
6B2EEAA9BD1DD0B6833E6315C296181A2ACD80F829EF9E36BEA2CC52C2D3165C
A108D73B46B3184155DDE4406F6B93CCF9A39CFD45FA9A2152945E0960424D64
188CFFDE44E5823DA285C3C10E16CB197A7DF573B91E5481522C7E5449ED049C
DF289FB3407CA5DD56519A5BA8158EBCA302F04050CCF0A68CB1196A5413A632
2059418450F3C51C6F5B8FE3C610AEC1CE3A39CD22CE9C2F3D5B0203E9FA17F2
9DC00E91F12E097A654FDB4013212106D464B0FE966C983286084D5387F49909
A6399C1AC4D093AE96F31557A70C45448F5CCE088B3ACA4E03A3CF8C5DFF4132
151E1300915D692AF2D971B0398468408AE8A9D786D4459F1AFCF280C655724D
54AE7F8F34E0A1E814732B4824505623842175FC61E9DB07026560DB5FC2C270
C0F297A27F4C1A269F1EF9C746341419C793F0EEE5D7C9184474433B132DB1C6
D73B8C593E553EF177C061D4B22C55F6FEE8C8D67EFAEBBD3CC218A3E114BDEA
9BE4E7E42DAC8806F28F4191E7D48C94F67BFD060EE61FCEC3339443FBA0351F
E639313CAAAEEAB4BCE2685697BECB8A82617946C2E54B1C8B9E3F75EA9E2952
898D2DF0E7AD1E993050B61225CD6E34B28002DC7E74C22192182C5D3BE601C0
B7416477C42793B52B6C655084B441198134DFA827D69FDF1EE9808BC121551B
D26F4ECFA13415BA19B37938E208966277E1C656004E34D740AB8B3F64A4AEE6
4F7F68BF699A97BED4C33668C231EF31A4D5750105FEB6F0C7ABCA5FDC2F6FF9
4F9E1E6F3DC25D6EC268E5C4E64CBF4584FA7599D096FC928471D2FE294C8173
E82B508A71BF9C5CE161651614384D7F83214B975BD1F082D7E515E664B5E860
2903337BF4700CC8E80950D45FA840D362712296FA78D778FEC5D66460D04955
DFEA71460082A0A85869A720A6D249F9A5AC91B1ED3896F2C6874D6C28F44CFA
B77E80AED8771C6EE2F71211DD70A2223B818DCCD6F5380E8D0D11545BD00C4D
6AB56897526AD773CC4FE5652B76AD6D1B60895C289260E878ACE4F655361024
0BA39F23FBE54A90B12646B3A5FE44632BED79898DE54B5A3D1F20111B23918E
F93CE8C1147B93A7EE8AAB6F15B681CEACE04904B1A6F5DBAD0B70459EFFAFE5
6EB0324C16D364A6EF97AA88A1AF3326775379D3B8E694DCB2C82940A35C0F08
B752FE2134FF5A862FC683DAA0E0C00177F9D3B10BF7FE4019611CC67279792C
59C002037F1648201E5EDD5DEAA97BC86C948570063933291D78AB534982414C
6E4127AB9A549A1C2676121FFE37C74CE40F290B86A6D076473DA09D5EB6334E
81FD2B536C53C1E5370DF9356B15C104868DB82A285837E62986F81259FE8DC3
09DEA299D4A6039BBF02B59DA7903EB695333740DA70066A485F3B1D0C21299E
38A93996A0EB7A3357ECED4BFF9E679553C2535B4FDD75927036E62840318513
539556BA02FE2AFAB5E9F03DCFDE135E0F268C1EF30AADCC618EC6BFFD94579F
87FFDBBFC612BE8E34BFBA978BB5E9C4F74A5B9E11D6BD6E0DCEEDC7A8152985
5F0CE59CFD89084011EA3C6E9A96D76E161E5A0F5FF7A8539CC3845BAB62FD37
9CE34732B9A0D97D8FA881C188C239E81FF295C9CD39D97DF78A991A8AA43640
ABAF6B7324C2B58FA4A388D48E279B57E7E5D223D544568AF2B32A79BE258F90
1A0B50141288B7EACB5C756637C9164A2737F37F649EE10B69C9188D59E7B6AF
CB00BB2A2E36789DFF58DCE36D53197D211924EB638DD838FBF245D7B5398121
A8108156D4D3249712471E85A059529C7D6101E2D5CC7CA36B1E19C9249E4DF2
1EC925491C9DAB191FED4034BF3397BB4AF64F4D308793FC1B34FBF5A82D9A43
BF14D18A56A9BC0120CD61B56115A4207DEF9096D27D3D6B6DCD3A8642C108D3
4C4CED6F7DBE80F25D75116BBDA2C9F381DBE43CD8F459770323F9A29B49C2FF
1894F7330B05D45B8DFD10030C5BFD9FEB992196F63AC3417C54D426DD7C44A8
2B622327EA30ECA42B8CB89314E8AE0F678F8C691A46E94A4BBB826E41AB00E9
A4C4D7424DB3791C529E5A19177BBF30C4399A266CE0B3208E7F3A8C0505F038
FCDE2A796E981760EED747888E8FFAE33615DDA93AB927F3D32B1842C362C65C
FAF72D25E958FD56F1DE5752ACF12F16A5BE9A050B0DE704CD8EE4010F3FEE41
224799C0B710586D3E3DDF28A5864D566F5C532109606E25BBE1ACEE7E3F02C7
AC1613E545DBF5CC635209191E21A873A404ACBBE4BE9906577760274BB4A25E
A7E493F4430AF3A4E3BDA695AC6822C4F42EBED74368FCDEB17C5D4DC6092E53
F92783985E39337A1DF36C58726F6C08185D3F91242D48DCAF79C194284CE3F6
FA6E71CA4C360A565A6313C91B57365C9E293CD84D7FCD0058326DD5A0A2A693
5CE12185CB355AAED83ED30E2ED1D23C4AED2CBA8ED26D3288E2F0160FAD0FE0
7B2188A293FB936A643AFDF49662442EFD59F05B961AF21DE2B1769C5D03E63B
161012FB2DCACE4D50CDC06341481153D901004A50097240019E47B2230986A5
D37263D62BA3D194EE8201318EAEBDD3869ED813FEBC6FE2F8D20EDED86C89CD
80DD664B7470201E0B68633EB54DE3215CD1B5CC2CDCF46A74AC94A09D60E190
C548172D2E1D8F212951E91AA20D36E2E8C1494640BCF0294FF2103926BD4D89
C90850E7F3BC91F69C38CC6212DA06A3A0C730A82EFF119E6FC5FB3941696226
25F2493AD95E1A2BFFD0BB0C2AE071ECADDAAED1A55A4848B35A67DD0F3AC45F
63DACFBE29EC531D24870365A38AA8C5EEDD3B4748251052976E31BBFFE54A85
05E005C9200CCB2B476083D7E5579F48B50B1CC6781A016A285C8D08E7F4229B
736986E422DFE4F51FECC9351B42923E388B70E7C41B77DAE3D17D3624EBC3C0
042B4879347556B6D0AB91ABEBAAA6D9689C52D87BECC88C453C2623FA972BBC
28C9894B4C940F9ADECDEA7C04E0FCF921D1F61BAF18FF010A03BC37EBB54054
07ADD61147C134FFD6FF283DE761492DAB565D256F3CFAF4907DDE965AB968FD
6558F41233D645263A4EDF8F5C38BDA87F5FA82452552FC0B2D660D6A8213050
7A21A6DE5FB2D63518E33F23FC1A56A44E12E037DE09FE4F0C34AA0901C7FB49
4FC87C16FD9FA2606CC3C0E2355D0368E962D563810FB0274D7343949867C5F0
970BAAFBAEDB99A92AC1619560D2059DE37D1CA537A1B45F4C9F5A7B8FE44927
889FA4CB6C76D18855CC16896FB5D588ACF2E504ABA48735D694125BA9FB26A6
00CB272F79AEB9F7CE48B2B7788A21D8AE47FF8B6C9FF97A5EFD43BAA7D48B59
A4163515DE7D0243DA852131608F2B06A5D43B48D40D3DE302B91317652DC2F6
AAAAA42FED987EC4AEE18BD31026D58B1F8780BCD102D1FAD4E4561EE9B18DD0
A750D88ADAA5BA7BF78B27DB12C40B221A923B06DEF6EC2940AB9EB03EEF6178
BE5DCB4A90AE1C499B3B0998BDA5ADBADF4B4FFD5F544EE772088C5D2D775802
2ABEDBBB1C1FF12E5BFED58A8D3D7C4F51EB2728BB3B3E49862FE8327ED45E1B
D5D272183EA7836F0EA11B02CF1ED73F722480B4606C600321D16575C87A944D
C7DA539E754BBB06AC7DDF12C747C07194C9D005473338614ED1A0FA63AFCDDE
4F3D817EF6AE086BE8A59F66395AD65937802430D3447441CE8C6F6336FF51EC
F373819FDA43A087C152DEFF1B53B5E26433E781D00E216B1B1B57E0536849C2
731DF989D9BF332634133ACBA2129ABA83504664F9F6320C0DEC08E6F0846ED4
B8F4344FD3C99E13804D6960AA6F0C8AC025AE0211E8E28FF153BB4E9B4D6FE4
E693779F3E730B68AD9FEF4DDB7A84479644631653307A6F02894CB32E42A001
01CCC339F93EB845916978F081D990B7370287B26838858502D6A66778BDB5C8
ADE65ACF6F7FD088262A8B32930B193FE250BFB32FD3193AB0786C75308FB861
CE544758876BAE9536F61D5DBD3CD0649461B85B619E8659AF38C5D4E6634E80
132DFB4899A51FD2A0834BB5A2343C70BDB69BC06DEC3B15060C55AEF4283DD4
52C4A7098547FF192FD65B3EBF2E7B9C7EBBD95A59D8C6470899B5A387CD9F90
8135B84192400AD675C20B8E4947E05B88903D15EF7DE93FAD14246666071A43
91FE09CAC4CC165E8E93C0C15E22CE3E8FF152F749DC3632BE96FA9708659644
2CE5B2C1454130B90FB9408AE8D65F226025253B734952F98CB648784FFA96CB
65A9D7AC45109C60BD9DF0E490729F6D0835CFB9A1D6D11E341BA51468D92AB2
5EE5358AC21EE7A31E4510F519FE2B69797B953B41CB4B767660B0AB9BFB9B3F
22458F76ED92621B57D362FA93A57DEE812ADF7CC836B67DBF0D1780150B2185
88BD0E56A3961A6127BFBC33A56388AABE46FB512FA8214C0CAC135E562E1474
88A91AFF106389D7529ED6D9F2B4B21355A7B0DF766BE1F1E1D83B5F05855B1C
227D3FF10951E30070B085B608EEAA99A8AC50D29DCC0EB942ED8B7404289F2C
EF99339842E652479370619754B3D2B85752C56ED0CDDC95573E1AAD851B2E87
AFC42C0403E1E326834C1944A483E4F46B7999AED37D32DE4A9A2BC49A12087B
4236F8BBAC6956B91A04EE418AE2F58002A41D44C506644C1EDF35D211F1A446
72817F354812EE52011217A42282D3F86DEF4366C1C08E0BA122AF7DB75E1BB1
2F3639DFDE4F58C3DBFA51827C5774CF45E98265B3F141E604653AD701A15794
DABE5854CDFCA733180F8675B877D43474D0A6DFFFAE87CE2E0BE1CA4287C0B7
BB3C1C42577BA27603A51EC17E3CFB5C16364941B851E2A59F55FFCD631094CA
DC86EA62B49090C57DF853A281D2C02E331029BCB80335783DF931D0D915228B
AD96
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: TeXGyreTermes-Bold
%!PS-AdobeFont-1.0: TeXGyreTermes-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2006-2009 for TeX Gyre extensions by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS). Vietnamese characters were added by Han The Thanh.
% Supported by CSTUG, DANTE eV, GUST, NTG, TUG, and TUG India.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% See the MANIFEST-TeX-Gyre-Termes.txt and README-TeX-Gyre-Termes.txt
% files for the details. For the most recent version of this license see
% http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt or
% http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt
% This work has the LPPL maintenance status "maintained".
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-TeX-Gyre-Termes.txt file.
% ADL: 750 250 0
%%EndComments
FontDirectory/TeXGyreTermes-Bold known{/TeXGyreTermes-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2006-2009 for TeX Gyre extensions by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS). Vietnamese characters were added by Han The Thanh.)readonly def
/FullName(TeXGyreTermes-Bold)readonly def
/FamilyName(TeXGyreTermes)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /TeXGyreTermes-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-586 -341 1305 1118}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E69EBAE83EE75728633013BE9B3D7F0C664901
9F2F4F08C4368A1F72765617FCBBED283D8AE14466644F0FC2370A371B8293AD
BAD586EBE5EDA7CE8B3C4193CE39D19FFFCEEE84D3016CF4B97181F2254A6BBF
31DCF7F5D3B1FF583E2264753D0487825A8183473097313E0E6CFC221B943723
84AE59ACA68F1035FF9291F518981FEFCC8EB71949387F5C737648C69D02F1B5
648D994FF16FFF63AB0F5619CB4FF47696A21AB75AFE06CDED6DF65140D3F127
A5285EEF45AE267172AFB2960EF924BFF51BA6C9BB827A078208667984BBA9E0
D587CC8BC918940D6887F60B35A60C3094DA2E96E2FE09F4A4AF8204344D0FDD
89FF5C7328904376CA2A8C0BE761BB69AEA61516153864E63B1D63DCB5331A1F
EF9FEA9BBE68C5BA9CBB4ECFAD1F8A45C5DDEA1BDF48FC5DDC90CF33385C5659
7AC29C657C77C7EE6DF1B561EB8C163E348134E2436EC4E1362A6092349BAF55
CF72E78E6585FDAD79632FFA7E1B33B3AB5E77CC6E8503041E0627CA5205A19D
BE9BF2CD9CA1F25E23F1B58C6A97C81F977D994183EA2036F44B1745A0C11267
C7C31F1CBF40B488EBB511A858A4D7D3EF714721E31FD7EA5A2BDECCBBE71AB2
52097BC322A596C69012AF1D9A47B767D0C583B03D23ED421984FF1992A8DB02
E2ACD29C1BF5C94C36A8CA219975E585FB002BB63900FAA4ED4B69B32AEBE3C6
AAD3F3CC4D5DD9C8702A431D1FB2DC1B2672A517B2513150B5A7C0C9ADF3D025
413F088E062F734F9572FFC91D97769D57AB355AD57DA9D9A8CE6AF162FF409E
77E2564A57AE1174FE92BC6AA5A43F7F0D709EAE9BA054D23950681A1D00BDDB
4E37AAE3C075A3290F1E5A340219805EB859C4D3025ABC4CEE66AACD793BEE25
F4283C95B6083B796EFE0701AA9EB373E74C0B801EE6E5C6834A0CB25A2428BF
A0D79B7C5F20AB424B3D43579714C6D5DEBEBDADAEE39AED225EE5938296928D
2D1AA28CC1A189283FC82899D0A15A01E6A1F03C40CF28A295E895B9DF7A274E
64D31D345CCA3E4A8DFC57732609A5E4694452ED7A9A81F39EADA28E470C40D7
61DBE36087EBB1F6AF89C9768FFB51F71E20BC73CDEE9EB90AA437D14E225D66
1F1C3C5FBA2F06DBF4356DFF93B9FED0372D8DF63481255FB07C915411AFA07D
AEE26207EB2E7480E120F4BB481C445AB8D4D33378ACB8ED7DE1B0C7D2C70458
1BD389D4C24C460375FF69B34D18EFD16E320913DE0F6F5038EC5FBFE0A25EC6
7059907D9E501D27DAD12D2932F016DCE03DB940B2714775E5B5572C25A6E64C
521F216D9FCF7232A908F08952BCC0AAB8BBFE5C889EDAF00C9C984618D80BBE
8EB4657F1F3BFE97412F176E0E7716C77AECA32FE8B227A9D9173422A333C45C
6436DB9C6ACBE309F82EACBE1FAC3CD9A004F3ADF4F2DE14E190F50D2777B533
ED8119F306CC5F2623BFDAF5600168775DF39E2A13C841DDE80B196F6617BAE9
F33AC5E0DF808A05E736A59918E193BFBB4953AB21EDFDCA58BBB7775EB1A933
234276082E17993B297043B2F75674AA08F9A9DC809B6620C88AC1B10B7BFACC
1EFAFD38D3EDD8A66725E097D62EBC6744A2552071EBDBB0170172C4B89A432E
67A0B0EC105F70BED7DA446A3AA2FA4194F8B38617C1E53844B2C7A227322C78
3EBDDCD10868090BCBAC0B9C69A74D112B40A942795832C5E985DE0FE5BF8376
8F9E302BEAF964400004B6D8A1012797CBA8969611C3EC64543291A49167CCCE
C733780A7FAFA6321B6945B95082E1FB3C5A12E29C2B47F3381EF256C0F1A449
0EE2F1C8DE42D0C7B22F21B630E2D0D5F8F796E0C285B0BE95D3207D36B47C66
D8C40BE57B43B38CF6526E92ABD57D4F674F2E91552AABDA55CE5511542F816C
40D939A89C36DCE84B4DCE802539446CCC76310012F65E0C3E7EAD386617B3C7
5F93CD8D9565305EF1001F84DE922D6B483AE922F1709F6CBF8C3ECC49C34B31
D6B325B37AD1EC8B2D400BC802A021411BFD7CA69DEF4F35816A39E65B1528AE
7D952D4A4FBBF648A235F6F3C221A21FA27814F2945BD12376C7638518111627
8357D8659BCC81753C2906EAC08FC3FB9C1B50174B553769823BE18EB57CDA4C
A3DC13A4C76CB9B777366802EF231671DDAD3976F00117536342AC6CFFB9D149
7EF62CE5C2A0DC23505FA431D98C032BEADE20C001B5D034E44B03ADF9D03849
B9CE01A4660AF17028FD32F73A5E6CDF4930BC962B5BE5C7E73165F96082DD5C
44FA3993D3BD1D10C217EA56B73B3A28CA3946912402BBAA2BEE4DAF43002692
041C4FF5DD0844AC4DF00F86FCCA06B75EE8A94A3D7BD6A09C8A2F08B32D6A4F
639D0B81ED41C40D8D5319E19372F8A8F55F0398D8A460E27A7189307288B542
B3138331B411668BC0ACCEC903E9ABCB6ADFA4EB07AC36443DC19A5C9371FC99
076CB5D922E2093D6BC52856BE1AF9A01075CFC0CB330087D781F89AAE66D2CB
744D69CEF8637BC50648E309962083110D4118327805DD53397B02197B6F54F4
E1382BE21EFD5A50F83C296A671EC662A48296D205C92BB0995C24F6F9102551
498F8BC4661DE8979672FA7FC96AC8E2461B01BA8671BA4AB4114D7AAC6AC587
0D0FDB7D9B36163ACF2F2775229EC1CF784E07AE3970495F000C428D6BBE9900
997FF35F8F6447561593F32A2457F26BDFE2E421CCC8C8A3A5A5A5C06132E3F9
2F9A7DC0AE201544DC7A3DAD29019C97D03FA54726D906264C82E8AED7E4AC83
9A56A4886DDF3A2EF39DE412F292588D074C0ADFDA8748B005E334974DEDC661
2AB66ECAD3AF64ADF60F5423E725D41D2B5EE0C3F03A603A161713216AF97C85
9D3CA890BD15DE20FC75F2DF6D80192C2787656F6EDA20C9BFB9FF931ECEEE55
6BCC9C4374EA6B2CCEDCF2EECA199594CF093FB8D49DAB28DA0EDB9463FC6526
134F0C58BC6A3690EB11E9D916DA3E2FB8D774C998AA9CC6516DC7A0660CC2B0
B3C78EA9652D67879965A4691664E373B5C24B3EB36CB7D5F86AB267E637852F
2D4A4D45BAA85754EDDF9EC01F28EC7B1CB253BB4F31114F6BB6EB3FD64AA40D
1E89750D1C3DFB6DE4D853093DA735DB67694569E8A3115B94FFCF3CD26ED59A
293533DE22B29941EA1A6AE32E06C7E21CFDA863B3F62A4266E23A13459056C0
77EAE6F2F7D46FCA1090BA2CDF850F9E1A5C5856D41D8FB730E04C3B1798A1A6
2A0A6F8E820ECB5FE4ACA6A493180E09F7548AB5AB1461702C16DB6B9FC7A6BC
09A67527FA01EF67467EB103BB7812C015B07B6EAA4931AF4A5CF1FE9E68B059
FB6E40586E157D5BCEE30EC3FE52F9E2A9E583703F6DB868C99D17F0EC62300B
94D15AA880346040BBF8AE8E79C861287E39335277EF2294327A5530D2772F2E
58A2BB78B981277AD8FB61E2F17D2A333DA13567389FF89C666BAF1696FEE4BD
C1B320871226C56160914266B1D28D74185B0E0FAC89BECB36EE4250DCDA2F35
533B6A393EE072CE17E336BF189E554057B9862A120162EE8B3F4E8DA71604E6
9331F1E2B13A67B51AE8B12E5BFEFDE5D92BE7BC5EC38276AF0FD88887EB7830
EBB7FB142EE14E7C12BD59AF91E6BA65DBA894F62D4F977DFF168ADAE8A1716B
C172CC9557ADE417810A48AAAD3EAE66BBEE79E19BF6B30D1EA14E7B8EA8A5BD
31E2FD4A3C65E04F45CFAFFD52BDA1DCBD0659FE7ABBC27848B139567BD05210
5849E1C84AE6E32B58AB6BA4BA2FBB5CA6D2DE2B2A15204D8D0EC8AB2AB23D24
4FDBEDE098610F35EA1D11F666C09ADF8063C7B805C438ADBE8AE3408EBB610F
70EBFC7E2B72320948A9C1DE54F4AC61F328BC0E69F578DB8121C249FADFFB69
F2296D9F724349DB4280388A50FA32AAD7B87B3235EFCABD4B5009190D1A734B
92BD48CCF7CFA30A7E92FA628D056602E7EAD280B1A6C6754F6487EE04ACD8E9
1BF342F4087D9BCE93F3E8DB557C4E8C34903DA01C0392D34BF37754475D3DFE
0F29A95466088DF48B38EBE33BB1B746FF7B130B060D472889E553C988126096
DD343532E74B54D22A81B8BFAD881223220B4F4042723C95CCA984D2C8B4C924
9E4FF166644F70925D7FBAD1F5BEB2A1754A08910F452C7FD271C1B9BACA5219
4DCABDB428455182DDD7A545A4496B56480919654F753822663BEB71A9794546
54E3AB7A02A32550E356E526DFF66FBAA70ABDAF1CEBB60C9DD75E91CF2E77FE
532265F8D329542F0275F485F8A27B76856919419613973269D39C724E30989E
C38FD6372FD614B3A67B1451591E5274917FB7990F26C738D1E8782D670AFDCF
CBEF6BD68AA64D6F0EAF3916DE4271273CF39110B40FEEF6B961452F14E31A0C
00F6487CB687830972BFB0D20CE2A288EB98831A447D676308A07F230EDB9990
2132CA5B6E0E95558764FCA9D957CA814FA0EDBF77A708B547E6AF5472D97786
AF2B4DFB53F6FC0A5BC9192DA91A270938270A0BA4B5D68B7A314C04B7546244
474F513F8F91E616AB868D0736734552A03DDF0BBEAA28E83B5C94175DFB9E11
A2C919B31C85412BF6F5AC854ED369FBB53441591ADB8D2F0DF70437BB056519
FF432CEA503118F0A2F57D33E98C6DFD2200ADFD140853F2198A7B9458135274
8E70B4CDC06EE4086836F54284D6DB46BA9856A16B74D2B54D35CEF58F98DA88
85B49EEB34067BFD6D4B1CD777C88DF917DB20804B763FDE9614BDB2EDFD18C1
0D3E6FADA25F5B61D2D8A66A55FFCCC8EBCEC593DCDB97D883FC8742BB46D71D
502A040CB4DACDAE1FC4F892A2F092A3E459A4B9D877882518FC4532B2AA0637
438712449733447AB20AB48FA55F73FB9648B66848EAE89CF668D0E0A1DF7AE1
DEC9F43EBEFABEF2C792DCA151B0D8E1B1412623F949B97FDCA298C41A6F6798
C5361119B81C6191E2BC789F1250CC5A3B60478C7CD7C2D18483F808522BEC56
B882FAA7132BE44229304ADC8A686D6732B0207BF2EE5E1360D7C2D3174873F5
5307E929B392CE3475109E211E2067A369A11ED316CF1AC2294E853433340952
C7F79F9FF16087E6ACED43124B42F0FB3D13C02D26B276678F736F2E34212A72
336D6DAAB732B3EC3376BD946A143E123E480C41EB8241AB194C0896546D749C
9790693C711A25CE1D16865F3C7ACFF6ED4EA6DFDA17340E96AC3D13BAC452BD
8BB544B57ACF2F9FE83E3E68109B1823E8FC2E2E897C1AD9E6A375D7771A6AED
B0E02641A973C3A705388227EB31144E2AC7B506403215A33E829F9D235B219C
5847C0D82F0E866312D963E012DF0DD899911D2391C35CC98FA817B5B18FE251
7839D51030B695AD719A5CB7CE178C529CD741BCF3E19A3AD3094F5C09C98015
E320FC6896E2F408B840D4FB9786E782B22828CD5FC2345A102333C67F1ADE0B
F892F79B30340EAD85358D0C3DF59483088E0697E444F8698C55D537D25FB79F
D7CC17645EC1167969BCDDEBF9C837634AE662E06B4ABBCAA901C3369B93301E
EE2C3475A9F5B96239829EA13DC42D84A0DB18152D56A72ECE236FD3A3914574
309F3A6CDC7DB84DEB6DA73092F21F04F718009DBA58BF46ACB0C959EAD81262
3B5135A85BD472D60840A71D8CA55FBAF25D592ADB01BF6DD128E980A062580B
9FA11ECF86385324ED3BE8E62A7510075ABECBA8375A5B8302EF82972798501C
03923299058BB1F5EEB4BE7298EF4FB8FD7FF8BB006B180067B2F9E68C5528E0
DD9A56E20DB4DB320337C9C6321199E4567C6CC54599761B9B052F21C641CBA2
82A9BDD4A1980409CA6EE759981E943CD7269CFE155EBDF9AB2A053F432A3149
B7BA168CA488A7CEA29FB68FA387BC053E36BBF9C0955610BCB009883033638D
DC5EFE67A2DC0DF375C832B0315453DAB180934BD4AEF83339A0A4E5F1AA194B
2FC8593DE970B2C883FDB6B4C34E8AE8162B8FB4D09237C2396A5A7BD8631FB4
C96DCFC90A5084AFA8A975DBB3644ADB1037620E73A804430C53D5BAC0B89EEE
B9E2F9CFC6BCDFD9A438C1097BED0900D14EF927A2F0C3A8BE6E4CBC44070FC7
9D868BB8FAB6FEA260B384C50C1A2574698D6A2A43888773915B8E2F994F235F
A96862D6E547C966E53777E6C617927D85B6F0D4D325D8F2CF7D6A8E7FFE5564
72E7DEBAF91A8070E2FF25C6754963E1DDCD4A445A08ECB175B8F75F1DF7CF48
0ADF9E9D8BBEA3ECFA3ED46C2DBA5CB6D8666F481D4F7B40F065B01D1C41C9D7
3C75DA9ED182F2C9E8B2EC957EA523BD60F37EE2857AFEC47E25004A1BF05144
5F379E6E25C528C84EB94938BBFE8EF5684CFE2ACD62C502212ACD4ACE665C93
2C85AF503A78F1469E7A6B8652D02E450911B9742ACBF7875898BC2950B8FEF1
9963844163BBACC25BC2C7AD157D1C68D877F9C110C922A28B895148E53F8ACE
7CDA3877D7DAEFFD70643E39BB30841E4EFC9ED1858353AC4063789B6A407EAB
A2C1D185DA8A80553F052F97988D4B276110BCA39FC490B6967EA0E4C588F40F
4683C2295FC0C58D564A2A4AE29F49744D7F48C9E39E6A99ADE7AE908D2D4339
EF9CDD08DB4D90FD4145E934F4F263CD7C1A67E0FC85ECA5167683957E4A59BB
4D268C8E961A6E25E7A787826AB393776905C1624923AE6DB8994DD4DB0D452E
E6690A8ACC026ADF99ECFCC4461B595C70BC08D30416E6BA194905E30F116D60
62165B9EE0BA0C870AB44BB1683934B4DF710A2A8A15EC363DAEC92DC7E8BCFC
67C2C33B0C61222B6E97F0D816D95BDA0BD99EC4932E1CB09843818E08F47C72
B0FA3DBD17AABFB9D89DC9FCE175E01B99D560060714F6F7B0126F2E1EA686D7
693BB1BDB187E14D4CB29A32B3DD2B06D394E6C71B572542E0ACBEBFF0AFB8E2
D47C97F9B3A11C8CB3EA31F589BDA600E115E70A71C541D6375466FA0272B673
93DCBD86FE4CD039BB4090CB8C23F82FA31232BF9D0CF9C597D22FF591A28B7A
A32E308E0DBBE8CC601D174B2E94953F541C3B84D43368642DB74F828CD6355C
CBBFD6CFA982D1EC42F237D5440483768F80764D94FE8A746FD06C08F15F973A
528327F74D83D1A6A8A3F63EEF5726CCCE0DFD72D09F40290BBC437D97AB42BA
FB1097B2E2952E86C88E94BA7020E706DCD028639F8848A001E1964C6A9D4A07
A4A5D2F76178A5B8821C138163957573B49DD5B4BD182D3535C05B4304D945A2
BDB579211EF1B7BDEBD978A70E297A73E7CE83B3BA4339968E9597EEC1614470
0ADE725EBF17B3C35D30BF42550ED9739076EB30477D455C7DF2258FBD2F4F37
94A28699B8E8E73CB2BF656EFE9D02470FA6C00703279D7E2F2A9CF549FC86FE
0E0B595F2DFCE91606562D1A33303B2230D5DC483C7DFEF84FB08AFB198F76DD
269C08EA3961649C0309CF1E532885A495990A9B3DB3BB018F91D060E6A3F499
A824C165E8AD7CD2F8B733D8075F69A1458298628A6C17105A2469DC27876F40
35544028390706CF1ADA8C4DB08CEE0ECA2F070C601E09DA0B9690C4E3D619F6
3B37C03458D9BD552DE9B8B026EDE899A33A846BF3641D86F3B3D95ED3FBB8E5
63C2CC64E2DA3631AB809AE432FEAECEE3E2A12AA6B6DC66B2B18F6D030844DF
DAEA1DB0BD56D657CE71AFBBE23902FB84991A570359B46D63C5312E87FBDBC4
5E45A08706F0E124592741656B60DA9C767983ACDC2D2F02720E9EF083D3E979
DD3D75F239B0A0427A15A585A40D5265A4CB711011332AAE28B10796C19ED992
688C38D5AB822DB77434BDC79A29F57AF967722E3358A5163F4065B389BB6DFF
6156B8DFF948EB89DEC4B23A97D080C2641931E59633708BABA1C0C292C43FEF
A3D9E13FD38FAE1FD869366B61D37AD7EE873168EC51BA0E3B73895A45C13670
4094A97F5F335EDB706D9E54555CFAE6843699E4C3394FAD3479BAFFB6877073
071EA58A0D10AFF07F15A799749C255C27EBF31D422B9F568B9ED225D9D69B65
81864E351CA800EF63522675679D3540CDB376F36CBFA9240A07421DD8A51DD2
C69C6F083B6496E4785E56925A4C7DDD6E260679732D4B274924000D2B35448E
633F319D5CF793DD6C37FFAFBD7E96B914B7DB80614C0243F3B3C291206608A7
91091680A56B2DD3F25D5A9F620224A0A463B7BC2C470BBC87A66CA0AD4CACBE
B2E1DD7F47029E1579A62B5E34FEFDFBB40CCF15567797367A96A03D3AC106E0
6F828E907CF742DAF6C658893DFBF0DB8BEA767880B7064D05A5F96998F440E5
A3CFDDA5A71F8DB20E14DC06904F0683356887820D6BFC7BDEBB1F514D946950
2241D4200BD17DCAA212E9576E25EB201C38AA12BE61E2E6D4B23E9F2D91218F
726809BA1644C7BFCB667D8A6123F3B3A1CC82B50E7615BAB550A8E0F36D01E4
8058D763BFCEB4A24667FA17E51E85E41E6A2B41331C56457D7B64805CDED172
38760B6BFEB2B9B16652CAAB36F65AC444CE9358671B8F4F3D785A31C1CF5B24
D127CFD021D684AF84AB50590A04D6A74092A710A9A82AF7E4210EEE6AC5E5FE
8AD910AD176295DA5025B24850D06062B5B2DBC288C78FB70E96C682B067F152
5DC438EA0076574A376BBA71C96C25680EB3A373793F0656C0B449E94C749BD8
13E240AD513B52A76AD22BF805C0BF3ECD84F80F0BDDAC3993CAB2F25B4DB3DD
55D05668578E76736FB859EA249991939FD06C0E2DC5B99D42C49601D06164CF
75F70F6D0739B851ACF798EB6086D99D6AD77CA64AA2EDC679AA1B5205985577
07267CB6E58F6D9CA6F5B88EF3EE140D30D048D6E58CF8102B09B0CA478A6A6B
AC8CD12D58CC301D7006FFC332A009D7C51513610FB670A220DE6572297C9547
812B285C06A7820642245A91B895E01839532EECDF2371C091446F1DB0DE5F6D
45CA8B4F0E073866AE3EAACE33019AAA883668F3CC1181A14D5C2F627DF5E26D
F62197B85088749F3CAFA40A6A3223D4CED495D577AA2D0890A369061A83A297
255CDA995A30B8144AC6062DE32241CA1AE9D54F1E3710F18FFA2F912FD822B1
0FA965DDA53F44B6905704CF35D7BF8C3CB2AFBE309246FC0155EA8DC3F8EA9D
B943789A191542089E218EF794A49CDF16DC6A00064D7077F2DEF495F3DAD5C2
6B03BA5442F9B02CEB5178A3F3C2F9D266CD2DF15E9CC37BBBA91E09D56A9947
DC9406DE7410672590BD7BAD0514C1F89CCE03F54E22E2B141D5417FC4E56B37
0A532044B13AE44C9CB32EA91176D5C3294E3064016E8554B9B513CA3FB2B046
35D43B682FEF799CC1DB95DE914558A8D2D887D3DC9D80E7BC03A0FAFA64A7C5
FED819BEB1AAD89ED0192A80E283AF75C6FADB9B4CEAB82649FD0C5F6F5CC921
305B45B1B8FFDE2A09CF6301F485C8B7DC2BCA6814E107AC2BD2E5BA6E9C5DF1
EA2C15AB002038DD1EEB0B2C0AE9D1AF457BA4830AF3BC5AC25B6E250D2AC730
48AC55486089CBF1E7EF9C21B3457A2E3D641BFBA28FCAA304F10AA59C7F68FF
91DB97DCDE55F701A63D822E45617BFC36D07E89110A0E44CFA2460615EB10B4
DB48B4F20C79A7038E473F435DCC8DFED5B9071ACAB22F8F0B57DB8FDF8A6088
AFEF5FD1D7F8363E5D0A84FA703F692A8E50D23323398D033104FAB5D185231D
A4E8C9888FCB62E7A0BEE16D7A70A534918AAF87B8E9E5F79D176D0742E87C84
1EA0267D10E5959961893ED52540F36A8CDE87C535EBB201D3A169CD9DCC4C3C
256A096363D956CE9AD3AB8669A69121B16C33CD949DC6E4C615623FF6A99E9F
FA2DB4113C12AB9C616F074276C4840A578901818252AA45E015ED22945BE21A
9DDA0AD4D923E4A9F4DE2A371B02BC8FA4B070EEB302023FF6228B4067632923
DE34A7C05AFECC87868D475C5F8015B05CBFA25531DEE791C64EA44DE3016231
B72467837CF7FBA9180FDB42A4D5DF1451CB00F77716270BBDCD97679B965134
3B421BB8AF0E7365683A159EAC40D59B99666C5F37E636BBAEDE1CCB9F8DEBD2
1E86825581E3955A5ED3F21E3353CD23FAC7E2B86EEE2936DCFD6F0539158D30
F1276834B6D297D934C7F01CCFC190FF085E5DB40B20FE82DC399FE1D8CFA559
C93999700F1189021D60151755ADAEDC4A456134C235D3B273A659AFC6F867A0
A6B292E4312258C750110A03208A81CC2FE254863CB2898B30A8358E0A1B0516
4210F4453883898DE5BA43091343CF8D1EC7256EE3FB416D8D4D75C7DB51C829
9B1400E5071086BFE7BC6EDB0E09F822ED7FB3D64D0EAF70FE2B7D2E23527E08
179748C47D3233B795E69BB6708FD21B48613FC828D5FB2C9832772C15EB82E8
6734FF9C269B634A00EBEB709BB571CBD6D51C00B349268DE077F06FFCA0981E
2644AE0718BBDC6A43328284068B2AB05CE869F1D494848C43DC9560E46BE38B
FCEB0FDA3EE2B1EEF22254EF68A6F45AEB7201BBCDED53FC161D391E60CE7E21
71774ADEB638DB46DCCB0C6BD2192A98CC4896B03F3B3DCBE217F0AA2588D086
52288FE7AC7559D8CEC4631B5B74E8F1633C58C6C2770DC561F2703F8A109E6E
D9DF38F8639201D8955E11C53CA69AFD141242589D0677010AF7B697A616F07A
A95FC25807B9C3C17866226365E45DCA91CD03E726B1EA1DA0D2D3A0C45ADBA0
4635097A26FEF8370A38E142AAD5349BC4773E95182C70A1E762FB0900929A29
FC28C508A73216BA87955AD8BFADE21C038C6FC92E4D81CB7723A14C83E11A4E
961F1FCB6B63B9AD271E681133A39732C72F4CD00E826B2CA8080F77C4B37430
AF88A3F85132DA00251F5A4E3AD99E4503E009D03C8E716505830E4391AA5074
CDBC73175C2A65FA47F5EDF39DCE1847EF2371151F7AC33A81947FACD4E1AF26
2A9B23992492626D803FE071A2DC7981C82D6DC31609B586AD809AFC85E0D3DA
4C2410995360EA249DB5C4A68B8F974BCC432016F24F184298438154B60727AE
B9347D3FD8F575230559220F6A416C005EACE2A3674E070919A734F426D447CD
F8EFDCC1C8AA92340FC775C38F8E2A06C327B57108030856E5E8BD7F439982F1
DA40ACCBAE584E51CC1432C5F44E74E3693663C3C1676B420AE8519A5898A31D
A1739C01711DBD28018ABA735273AF08A8D70AEE51EB0ABDEEAC94BF3611A6C3
560E647AA97F819A6AFE696782CCAA8E8A7216C37FA27D3E0519D0608B2273DC
F4CB3A1CB631AFA51A23677CF06AB58B736224120CC5E432226FBD4681AFB83A
9E85CE3D05E995C1625B55A0E9FBCE5C95B7240F7804FB337196078BD7A1DC04
30AC5DA38AEEBAA87DC3DC4E5149815DB69F7507E322CA3BED912006D4D60B98
15FDD84D105267F86C67AFB98FBDDDEC71DA8737A84BAD294030AA8930107311
94F7C92D83695EDEB559F0D4A8F736C91551B192FAD32B83873EBC8C23AFF4F1
3A96F3D9F1762CC2604F56B4A6E50FDE64083AA7CD0A8F3C0EEA6E6D9A047578
D72FF30455B7E6447D19E2611C39EC0DE9AA9AFF1A0C839634A81ECF5A229D2B
16EF77A39178507E41D90A24FE44DFA7F5C260FC9C1536A6CEDB493976B10512
0812B24F440A40A69FAC2613E33319EA7DCFD8E886857FA84A35ED5CC53EE38F
810C494CDE233ED8AC7E692C784FDC7AC4D4B4C56E14EFF907A412323CC89CF7
05835E57395011B3A13BD144BDFAAABE3E3F9A2B1635540928D07AF0171682E8
69706799A16F3755CCDC64A183E7F94A37BCAD21A297C69FE7FC09DE4E7768D6
8B27DA250C081A8638431CE2A93113031EB40F0EACF90949369CD82BA8FA6643
FCD7F55E72948D2DC55AFC5016FB2C4A0E2EACBDA9EADBAD6D7267995C72ACC0
658E69A52A687756EF86B63BDB575DAE9F7E1E55AD308CD97CA63ACF5706F325
51D90FBDB73C5F1A1555AEA91394ED682BD24BF6AC23F58C8EF808B093595E63
1544CC051BAFED6B3F5A1650C9E72BF8E2143D43A1481140B10252DC8E0A6EE9
19B7F08114AE0E56A3D310D6958AA2348E1D304D10A259EDE009D49BDFFDAEB9
856A46D359FB4E1D5D02E544AD22739B770949DEAD0D39AD7D131A3A7AF05C13
4B444183B3956BDBDE2B4241C613FD0F345B3C97E4409023D5175E66EC9D1E98
995562DACE57A09F962CEA1CC240EDEC23AEFA3FDB17EE7A70C7AAEEBCCA32CB
4A8469ABDC335FC4B589DB92B21ABD5F4A1828236BBC63F3FFC348749B54EB65
2F76630E3A62B63A3562A54144C1A1797DB16730051EDAFC10D2A983B5A2CE05
05CD251D0213139E2DCAA12133B5B6017B0E08E776403F967AF5B9B9997E1175
92912B64F0FDFB5648C9BC2C591869D2D9CDEB1D7BC8BDF10C700038FDB23B78
F3BB8BC8902854A2249E8D39B75F2DBDCF84D5BF3AE6795B23AF56AD89789AA8
A46B6A7C759B64D7CFBDD25F22AA7378498096B750DC465D3A003CEB00A07240
B96F47F1E55E05DD0FFFCB3CBB56BF05CEA7C5200B5A292B432D0E5F16CB9853
DE4B5B54076F7EE652220C5CD20A575A917C9E783C6A65FC2E3E2F572F339F48
F22FBDB31B32E27C8602B45E3A1BD269021D4EFC90429432FA88B4225A1C231C
32ECE423C12758D23E791F163DD2224EC5DE80A58565DFFF74F892A5A105C4D6
67B99B8E51118A29A53C6F28086EAFACFADE342458015F57983ACF8912B5CAD2
0ECF8A0CF1EC94DE4F449CB4E40C9A368A1107BC1AA77444A0C9107F0C02C44E
A6960180786F9261D70E7EE6B322D11F492D391EC21DDAFB91C39EB134F0044F
75DEA0EBB3F038587C80FD855F1733F50F636A4C7426584812DA6CF5F9B6FE6C
044F76265BC8875392B5354BD38DDC15684D1AFC902748231CB4CD1A96284BBA
CD7E00195F8B6E585AEB1EFA22BB67887DA845FDAFB536ADDB258D949247D937
196ABFC771853ADFBECB7AC623150AAB3E86CEBBA8AC0BAF795333376EB4C186
DD1A8504330449B189E1B4D382439AF172F4D03ED7B859085AB38822032EAC7D
6180F7A037E4E7C8D1414676E80051B714940C023D19F9CDF82A54C3EE8257A7
A35A79626604E7D472D15E8A4A8DCBE0D0E6218801EAFB019F326E85A8CC9638
033FCB438AEF68DB0DF2F2FF138364824C7D41C3B93A0042AAFEDC471ED6488A
A685D04243BF460051DA59D0714DC3489CC386B6D55EBC71C9F1675373F838D1
6961838E3B6A9DA70201985A28F77CCD695C0773BEE7AF67AC7B6845BD08FBD9
08C8A61059B21A2B3771D04D150A178A65A82A1D003242430EB6FF1DBE8C3D96
F2BAFCE70336F6DBA549ACBF1B3D209FD686A800CD5E1F43E983C15A752DE044
C4904C375AACD66DDFDA88D53E98FE2347D03457D17C81740DAFE000798A2787
814333C50AA9D3E37E1DAFDBFC032CCBB03D0964DF8D25F7BDCDE78371107239
170D82A1EC5B2469B66B4160DA342B14BE2BB3AAD341F39913EA22BCE0635C95
A998A77FFC56DFEEDF5A93C69113D9FCD0CD3CD5613DAFF026D9E157E656CDEF
4E1C968B32BBC2E17B75CAF20CAB7938D921D338CE5C8A6A1FCEF61CD2A5097C
CF506C626B18E1CC6E4E58C348C4421CD919741ECA9308D44A93D148900E6399
2A7DAA5346D7DD91901DB0114BC982205B9F1A4F8D63E4D24FDB94B618898A7B
CE7591566B1881971217CBD804F803DCBC3BDF0F7A571AAE00F596EE01EB476B
AD92353B4F91B77B22E158BA172BE33861E18AAF3A48C729E6F17F02A3ACA687
FBB3F42A7704BBD690823BB00187EE5BA69AEE3175F2541B3E4A4B1776A6E5FD
EE28D416CD3DB308188BDFDA900480BD689CA4F326D85EEE2E3D2FC89BA9252A
603B3E95EB856A85D3762F7A5A783A38998CF797848F6175B9205607469FD3B0
F0C32108EF8BE78E192A26EBA06EF157958C1BC00554409AD56FE71428CFC39D
D554294996C46E69902090E3E51F1A1610F1936581146E0271E215FB6C52D696
C91C62C88CD8FF8B02EEF9EB42A6F3428012077754BA3854A60A3676CE5D4FB4
3BAB8CF7D678D9916169393F84630D51AF81054B1C74A03D20EE915955268578
5AF28FF9035EA3B088AB0159B8E622B6373ACBA6F0387CA03AAF347F7EF05FF5
1231E5D617A93CDA0960657CC231C6F1D98278F22229EC7AB2EE5DAF403311F0
39C6218F4D2882FA95447F8070AC30EB4F11749324C15349A500674AA342E006
23EF2695E183960EC2B89D57EEB4E8BF20057979A98A4A1169D36C6869674709
85AC22D7873925F1C44C359737829D5B7ADAFB3E1FA89A529896328368DABEC5
CF0D58815473607CA2BD6EDA120F1EABAF82C0383256CB36700E8E1A0FD86209
2C5D24CE3B8037AC8FDD3EA68783468F8D5844CB0AE12FB168192AEE4AF696ED
E54CDD8A7B0E5AEC9358A8B1E1C2D6AB92277FC241439926F02B1D5C4B4825F7
1065BCB57954C4CB5A9A42C6CF6EA0D80B6C7932E7FFCC75FE1811BD701298F7
63AA466B78437709A5E168706DBABDC86EE288A39DB1879EE205A354FFDCD60E
734BD20399504F034BFE4C20E7A31326783358C20FC9FCD66025CFCA26CA6070
F3F138947E9552402C323E4C27ADF4CB0646C18AF378060B81122B0D7959568C
481CB21E74A216ECAAB6DAE2D8907671248569054F401D337BD29028ED61C582
60832E6C4EA037F4A4453F7158139F8B0F4C80FD9ED2073D21FF50B841774BC2
0AA88592DE0C9EFE0C9232665F5E893D8500CB57D81CFED36567F652DD43DAC6
C32C9548A6F7607A1F49CA66CB10279075B62842A62135305EE39948429FB62A
DDDCA6F84624EB071D57E293719487CF5D51F3F8FA688FA1B9F5196B6CE08EBB
C0C484315EE485A8714EB6009A9C06DFAC8144FD672DF548C439A883086F14F4
19820F312F34B8DCBDE30E5E1DC183CA471A63C5F45A0225ED905D98AF46BEE7
C595B123A580A6D198644049DED12F4BC68666EF41ED4A22883CC403C4D9B365
6E83BF407D06A0FF2A0929546000672DD480C23948FBFFCEC3E9374E5D2A1653
592268E393BFA04605EAF9BC3D8611E3607832D6802A336C627BABC4737FC72F
8F4F6BB7D73551EE33D5AC67D413E79CDD37FDB07131FDC420EF525CC0B5377A
AA95412BCB80AA7307A1C978F414458F9A7EC07EB5F54E9ED3FAE75852C3BC7C
BDBB5EF23FC98FFDBECC7BF827A380F32B4934A768F89217A3DC055A807F57BC
D3B6AC170C7C563CC2D2EE272B0674040D7B82B7B40EAF78A6164289A675DFE3
9DF546A3BFF3244C90733BA17E4346834B1361AC326E0471866927E3B6123D75
DB1F5D1B6A2463EF171CCD22DCB473B8173E8F9133A6D45FBB5E17CBD0C05E72
8F7ED87EA484A596A6A62D6E8252305167A430D56CFE8FC26805B455CAA9BD0A
2A3286810DC211BA4A622EBDEA00FFFEB8C51B57F75ECFE7238BDE6BB0F0B920
E721E0DB58AE8034D8C75D758E668485BD05C6EC962598076D9112F645A13DE0
1EC3851DBD7304442EFD354CA4D7DA345AEF9160BBA6B3BA13F0C6568FF8EC8F
99C94A7162FA00F6E05E273B5DB89549315DD15AD5878A1157850F48A5E0F299
DD9078866AC4AC771A7B58856022AA04BC6B893BA13C1A07155EAB53871FBA3C
B15B8B4F4C828D7FF50D459FB6C913BB52FEF3A6D47E97B7F6423EC6C03F4A6F
2F81BA6E4B03157AF42FDB1935CA3D64576524BE0B1B9D79A76536DA7036198F
E4485CFAD47A1798199D542502CF3455678E261DD2E5776A1A908B09737940C3
14037C7E13F351A4D8C4B8B7FB32ECFD58896D714C6B3D5754C5547C0308B649
1FF8D13D64C263E5C218EB58606913C184E8F51DB6E68D9CAF8F350EBE4EDD7A
B42A265682A5908A284AD993F585331AB2476A6F5ABDD2FBE1542E9A15B7FB1C
0235555B9A28FBFEDD797BFBC7C24056D32AC3CE060DCF6F1747FD39C6F02601
56CEDA59B5DF6D87D097F1F1E7363300652BEB5E6AA78BA25E47027919E4ED17
0285F4DDFACE238F31C8D2AF3FD3C41457BD80F5D49FF26884CDFA635C7ABD23
65BD399C5D4F9B7E17AF42BB22A0CBC0D1FBA7D7963CEF292B67AD61286FBBAA
4725D698612300458A151C340E373BE05E025879F07A7B91FD0620414860832D
64B6B855B15527A43590C6F1759DCB70F1D04C517645CC5CE9311934FF0D1E34
9E226FC5584B9FC4F0405F405C1FC4CA66E13AAB475E8F409A5B4504B9AD4273
219035089EC60FF5EA13DC18931A2417CBE4E99578203F5B597E9D2EA6EC25B8
7D8F80628E2410E055E54E14CA7622C52A96F2CEA44D168389F90C79E5B9FC05
BD10CFDBDB04E6F3221875807F9D917EDD3A88DC27BE369C86395519CA2204A3
3F035120133AC27A2280F7D9D1BBE9B0B5BCBF55DB32B44264A3E4A901284F58
9BCAE609ACA5C50906D8C4B7172A48169ECE75E7981C6BFDBBE941EC16617DCB
9BC822B73985B080A7AC7A3F8A6C12F9021D602C54843A34841FBFEB00CECC87
E01CD9916E1FDF3EA837C551C603DFF3960C762B99AB88EA96950FE8A26D60C6
1DCCF15ECEEA2FD46EE0068DC1C7310DD7BE31BC135ABF3D1A030CBFCC7D4E51
8A0202CA6DFCC5B01A1002C305A5C40827AE2579FC6C9C80D21555C3882C5EBE
D5FAA7508C3834C2B5A8539347B1010D7C7FCF74818542DAAD587A34363CA4FD
1793115E592D63E3F8BE1DDE1D8F2AD8175CAF404032DF21CBA457DB65770C16
EA31CD0584EE55710FC66FCB65E3182CB065B2BE003453658885EC0E39F00BA9
9FBF0F58790DB69856591230B56C927CB150AE7B9B6AFD4DBB809681B3178E81
47C584351EE6124D1C97A638B4620E485A996CC84306CDD2D6B4B3E18DCB856C
1CD7DE9E9C0848692C38D1E3016BF4B4E6800DFB0644A2BE90C36DA268F7B58E
4FBA7C92DA29E9B23FECABB60C89FD2B50EFD6580BE5028569816D280AD2D4EB
144329B8DAB35303C922432E92394A95196DA8516DA75A8C17EE6E339E5C3279
B78C4BF98B23BA5E8ACCF8FCE4C848E41EFDCB5AA1EE1DB0E3AC051E6654EE14
CF1B3A101C9E6496AB07A84B35F0348428B104B11184FA14C6F7FF2FC245360A
FEB12779E6BD0E2D9CD6EDD002AC77FA44C3B89C7255A4F118846B7570803990
A8B2DD9D4D62B260CB91C49ED918419931FDA3ECF14ACD9EB1B2ABF9727A632E
DD25053B367B441EDE2A8F39709897EB567660970F66F2061328F85AFC287E9C
2421C4CFD74339B1552C248BEC00A15EA0644E6EA0B2D2FC448A6B9A97BED4C3
3668C231EF31A4D5750105FEB6F0C40B1CD9DD4D39C32F79AACD665ECA727714
8AE89168C46794E0AE4F8A7B6449A558A88D426B6C046E9A088FA755FA78B3EF
3A051A1EBC2C3852F0A4ABF75E0DBF780CDC4A3EA292BBC6F33628CE825E163F
EA3BE751DD38558E86E6A1CB1E6102FE69D3A9FE361F76046435F30D1F85E6D0
74627218388B1327B6AF6AECFA67902D0150EA211EDD67E694671B6250DAFA3D
85E0A78E946C78E338B0D08ABBBA6A21A2C89D464D9F276AD1C853D99EF075DA
4A21F19E0D985F7AB046A7F5F1665789EFD9EC77584B636E56740AEDECF24C92
37E73ED11FE11665B8B336772034989ABFF6CD121E84BE691C9A39C4D5363BF1
DF148509AF3C51B15EE89F695C54750357330063B99AC2C2A80CE50FBF6162AF
C244133B1DD676FE9E51A86F09129C65CF388E17EE6A1F9BE27CD71CDF37A945
FDDD071A0D756B5C7B0F6FD746AB60D080D6169F4E074CE9936241784D7318C7
4F1719539A584A375CC8B9C4FDF77D301680CB83FF0843547EE8021B385BD6E1
16AB4C51D88BB4064EAEF14966A693F7C422AE38DAE2C990FD54BE878B4223DD
8CAC49C9265E8ADFDB8B4CA7CD4E69E70AB0073D6C92F5D56A56F848DF4B8C33
F95133C72EA83EE493A476511EDA773AF222687DB9CF10CD88109B0AA050F06A
64F75682BE056BBD534984BD9B8D746C1800A4C8C647055A0B0709677C10ED09
4F00C582E77F6E21A71D0C319A466EBDC94FC971D86F6321DF5D41BDE10B5731
4C784BEE004C889EB6F8AF8007B3F27A59C82174638FACDEA968C0C5DC1CFA0E
0F8ADA806335BBD9CFC2B7A4659EF349BA105B54A849C5F2F57D79D880E13273
F7A423D64D1697F638375DB5675E54C76D7531F8D41028432E91C7ADB3A04401
7CEBA3A38EE6BA2063A650CBC87EB9D1C2DBC7AB408D3BC19ADEA42AE0AB3741
CE1DEF5B751D3B44CC1B5C82D36C0950531D1AFFC94017D741EB32F0C45B2176
4AB4138450AE3C9C1B184DF5E4681019A2F1C3406EEC3B03318DB2B6FEAC5843
087FB8C3DC0072C465538AA4A25431549FB6A4ED42741F9996D7BB1EC714A2F3
09172809658445A73832470314C49EE7D7E13ADCF5A1BA1B7A65280CA2AA2A73
99918BEF0043812F3D717898928604E8A049B8BADD510C82263FEDD03B3E6AE9
16B06A05D97809DCC68B023AA3650BDB4094DE5243426289B47B2763B2D6EBCC
95F10564A890B457F6D5861AF47BF510217176C9524D7CA2AB7B9C639CD9CC80
2AEDFADED44250F718EED93425742D97CC0F23FBC88F8CD4E4AC36049C284748
4BA1FAB4EEA28220CB26778A212CC7282AC65A54DB44D5A187F806B5D7B12FE0
96BD13F4515A4C65E6119973AB763E3B857A6D32903A4124E2264000233BA1D2
6CF9515090CBF63F37CA1E51253191C462F39C2BDCD183E84CE1BF8F83F59D19
20458000AA7477BE93D3D629A8BA4892734CA9E01C68BA3E214D7651402D5A07
856D80A2EF8CCAE1564F2D3FE9ACEC391B579C16B8BF9FEE807B83CF7E1E095C
B10D5CD3263B03C83FC4B367DE429450A21C9EA0419C3A9D9E4014CC17E17E0C
A6F2EFFD729590483A1A2E56BE6DD8D4D500D11DA855BD07115CCB13156B025D
F2E5182DE426255FD062D11B79A8586ACE79E7AA6D35E67B782D81D57BF7FD82
27DE2AA1C8BB6E6E5C1EDB206222974F0D7417CDE937FC52E5792EE96F0FAC59
B411CA72663A044A853EB94D553D50D56BA0F77A40E2302CA4D386A4149D5533
482274E2741B95EA7C74A64966DD2F49858BC351519FC213A1475A9CCF4406CB
8E601B345BF60B6462DD7913665633A369E3654229938E5C5B2532FC8870AEC1
7BAAB7BFDEE0CC7B8CC1335904DA22349A847ADE3C060AEC69C2987EB5CA5155
6EC8BFBADBAD045C00A6C3887E0A00795C3715C9B86CDCDF3F331602FE0FC138
EDEFF078A89DCEB952BB9193842B429B1AFB33D68BC88143F92B5D64DA3F8A2B
6FAE4E133DC1A8FCCF41B71CF582343250BA953450011B66B70D7882E0121A12
8CF3F3B5E6428E1F6EBFFE32D8FE35FAA297938A3C986ED12D5A16526196CC0C
7283976E70E1985FF9D874C78D51F06CFA30AE74B881649F1653F327094E4B77
8C1CFB65B5BB09D8A312C6698F14BF220309FB6562868CA4A0DDEB5BC874671E
C1AC1FABB7B278DC36C1AF4F2E921D2553A4C91B88807B579BB6A0C8F69CD919
E311B6ADE903B03C4B1F9754F99DBAC7890C3C93363CB681B598F26B2A6A8268
0B06372211F15B3ED73705851BBD2AD9D78C67879B0B69424ECDD2BFCD831C74
E5262430E9787D1CB636660BA768889CB155EBDD1341D52F0F72C308147522A2
FEFDD9DC994C11AC11F9038B2B1B5F0771332BF0172EFEEC05248E9B0C2415CB
B4E191E98FB776EBEAEE6D6CCAC0631525C9DA4B0B2A389C44A6EC3F5A19AEDE
4B1393C8DAEA6554C4306AED7E5D1FE44ED59EDEB6097CE58C4508F0040043EE
347D89E33620E66A4538C235CCD9828F613D73FC0FF274816A7402423663A1FF
7AE6EB0FBB6D88CF3DE69823C9E436907D9D7ECC96CD53E79DBCD8EDAD202083
0A38C7B58AF68CFECB09313F5745B02B4BB60BD80FEE03A3ADB919976D4DBFF1
1B246AF9C2FE922A8DFEED02E325643F78D02419611D50402BDEB3A16A92F72B
F8007FA4217D853967AF5E3659D9628533AE56E6505CFDE065A60B90AAFBEB46
42A196A54035F672BA95ACBBFB62934E4EA330B8A48154D410482DA1202736A2
0BD4F78F9C917A16AB20AEC7563535886E28292A42226389F002F8825A21D0D4
869F02FA1C99FEE1A786CE64B59D88A4C5C968742603F4FDB0B0B6D446B29F4A
0504D8D3491C37841C114A889F2AB95CBC4EE87640886D9555CC213C09AD0E67
4C1D486D4F59FC3F155A19D63A97CD1468A0258AB9968C77CFAA509FC09A7223
27A7A7082D9A50DD24BF3CADEE7E8C956454650FC6D9ECFF2EAD27BB7CEAEDA7
1AD36A1E1422A76D86F602E1FA74D8AD1F1280804DAA2B51B443839D49DE5CE5
37DF8352F46117AEF27B4D31854B17B86DC68521D9F6C742F4ECD96E2C6AFD80
EF31D706C190C39AE121E05C21D42313BAF8211094D55EAFB6107044B40106A1
BC239049E1F59E7F629CE4E531C6C03B8F9AC7B145216414C6DDA9FC802DE1C0
861E8C7BFA5F6CB780E69545567B2D7D0891B23857FB83125F1EE19256CC5053
025616EEEF28F24F95FD36D391DD733B708E1DDCB3DCD897DAD67D8DD8230968
DA328916128CCEBF8943967A33F856A40BA5B3027826729E361E578037E09962
E46CCFEBAB841E2977977BD4DC22C2A70EF3B88CD94B16BDF5D888D6829EB009
47CFAA95BD5FCF05778BAA1F71B2052CB92AA45721DF8F6788EE463774DEDFC3
928949F19EEE06C1A0E5BE179E393CBBDC9A7EBDA4351CB31A8006C5D36B1A0B
183AE8D62FA62879BB8345BE9AEB3389BC1F7D15D231DAAEAE6DC0D6E357F328
06D7A674891CAC99A83A017269CE9428DBE74E704276634A2F16C8EAAAC52FF9
00289981316BC60E07B9A6F340C9CF702531D6C664F8CC76003C390E4C666D81
56FAA3F1F7CFB832FDABFC818580D0817FE37B1D01A11B703085C6B4092A8B31
395D9C7991FB310C65922E86F99352A6DBA11F9FCC2348730C4A5DDF4ECC5218
D4C7264564CC4A435F2161F6EC1BEAFBCFDD9C8B335E025A19848C29F50D44AB
E68C2A018FAA8C57D30B7F86BA9A041846038A96F473AA3A62D68785283B628C
E960B8D969B2680C1D9F903BFF8C8003F82A76F84AEC6703D866CF9D143D0E54
06F189E5448E5B26813C6054B0EFD355444F1EFDF948C5309ECFE3DE89D2D073
D5DB53EF9B564606B5A49CD0514C89CDA3C719DA2D9AFB16D8A9B9AFD9BF3904
D843FD4EDC533A575B32E6A9A58F94065724341F9079CE0E0A5B9B4BEE1ACDB8
6500AE72576A26FACE3A2E739E7BBCBC43190EE840144F9F053FC85041782B25
B9AEE6DF1DDF7CA8856A61906BB7222DE42F65F49426F8DCE08B1C586EF5AAAB
F3E48C1DDF431AC3AE08B9AC02855057F0439D274AC334D6EA79A09DDDBA1B86
77545043FA3A36C3184481E5D8A1946D2FBAB3C43E926CDFBD60506A3C65FABA
59B9AA355E912CE925C99DC64B5221A4CB065B2CE1ECB841AA4263EC9EC6DE1F
50026CCBDC51BE128255220DDDDB5AA80C637A695912D744B28CCE75B08EC85D
F704ED1096FAA03E32EB7574BABD5487F10CCEE6956ECF41EBB2BEB2293E33B6
9A7AD07E12BB6B420D9109DED97FED5089572AC01915F6281607C0785568F53E
5A4EDCBC2DB0075C213750AFB7D6B975610A063D6DEE06B4913F26AC8CF5ACAB
BA90B45A4864334BCB401296D33B59132119F600427C11D65BD6018C2A473A8F
86B8B25E0B65E3FE4FE30ED904DFE04A1C50A4AC2BCBCD315548ED5C54FC6C44
FF51202DE5121C5792262864E90FEA605DC6AEC6269D4EFC52D90EA1C3CCD41E
D86ADAE9C01123EFAC57E18C1B97E405C045C305C9970551CE63E45D74F8B759
09E5FCE53CD6F6133FF1AAC877B5D434222191CA0DDF85F9AC469D1C54EEC2D1
2FBF6F0FF47380478B53FA240968F8A268857C7C013561FCE2D5CC58CFB18669
6DB1E51F2B0B4ADD1D974400A8C2642147D4B652A8F1A7E5BD1F8480D802FAC4
42571397A62FF6727AC3BA11E891C17CBF1EDDF0880B1CD099FC69F102DA1062
1ED249A581E06BD275BF88D7E1F8FF373ED07D33E42FF9C37B29DE429E8D9049
B9D26877A39D29FF6AACDD72D4849AB0B483FC2FECA91F2A21EBD10CF7969FB0
B6CDAA4440027CC78DB0AE8D8FD27767696A71E401C3D7EFA3F6906E42B86A57
928E5DB7B48BD20D22D55B9DEEE859A2E5B2D507D6C00DF5F2109C43785B9333
6E939EB40A8E211D636400FF41D25635F195218A804B2651A54079CF48068189
346338B9DB6F83FE557134C14144A554C62461271A3439DBD0C5CEA4CF1BDE5E
6F73EC07B3E7DE00EDEC625F875BC46F1E7A5199DAE7BC7EEB4C5C451EDAB35F
C6B188D1E4902CBB38AF4DFA01B0AEE3ABA7AF04C8C30F8331362E788658C0CC
05B50BD5510B97CF2A25C5A800E160285C1F860C6CFDEBC07D3F1415F381236D
58725299DF8403DC91461325F612CF1421F3099CCD799C23D4D1113D19B43A4F
31EC8856A7DECEE7309C0D148691BF57F0E41DB036202EFB584ADF8F82E270D2
3A90373E7ED6048EA67AB4E1DD05CDD42DA117D5956FFE7111F6E83FE36EDE9D
31F3DACB8628548FEFCBC7FC09F9FDB53D22DCEB3669E8934D1DFDF43498A55E
DF16A009E3EF4156E70F2469172097ABD94AB45C10AF3F3FE34DF9C8D8D53A93
2AAE28816D999955116FB5B015C6D1321FD3A5C7926E84918A39238AD5F2A84C
51853099A987EA39A3E4C82368E361D4034E462F659DFFB64C404825C32C6933
1D96D50482017147AEC0EDF0480A26C76849D3350EC6A601C49F3450F08A2F61
C19EE2E4F1055A044097E98F71E73CD14B200DF449FB9D09F917E5CA703C7E97
EAE25E5FCA9C45F47ACBA52FAC5337E9C92A7C28E1A84B9DCCF7FABDDB6C50DF
2485AB8138E3D841A9D8F9FAEC5392BF062FF54A1B7E31792F05368499B19687
E501B32A6DB3041565FDA3EA07E2C04226045642BE31A8B41838ED3CB67F34B3
BC115C632BE86B5E99F792A4C09783320CDF22BCACAC6B2846EE200539F53F83
3F07277C245A359103B190E2F324EC58B047D5703E9176D34739436AC3F3E3F3
693001CD131D8C3330918BEBD96204FAC4B748F723A1B5EE0BBD792B783E0E46
FC8481CC9FDAF3153CADFF36A58BB760E6EF9DA2B8DBB44BF54B6B810F6B2EAA
A1C54F2F501AA172055892C47614A9035E7EB95F7FF6029E87026F3BB851D1D7
FFF4837E72EE7A9D96F862CC5473C3646255E70FFB4731F12C1375B510DE7F47
8355CFAAB20FCD1686166EFE07580DB0311AF7EC86F18D43CF515A8D8A7D851B
88785AD589B451B5B6F5221EE654020F34D2E4564D557FF2F59C5E6A27F6FA04
4D966A8D14156A2604D976052BCAD16FD258A3016BF370F6ED955316C7438D43
66B8BF0735BC7321DEC56AF01FA3B1EC678BB3B45FBEBD4988B5ACFD71B15DD3
3ADAB18742D4B1A04F16826F1B260B56E53B9BDEF27BC2D35AAC2D0890A36906
1A83A297255CDA995A30B8144AC2CFF1382FF6A474BC95D164B029EB8875677A
3C0E43DB8AE08F80846530A88228B1F44C73E8CF8FF1E99D5CD891681B072937
24911F271963907268939A7077AB632AFD2565555D81CE61C00B56F28F02FB1F
11D7C48435EA811201E3735C1238FB68520A56BBDED554E575018D987F5F3280
E59E14C1F64C508C3C81BC1871607DB026717C2324B32B33E7D9023B3B8CFB63
CF6C8AF9623945555EFD63251C667912F605356788B31059712DFECD2A648F49
E25938A4D87BD8AEE6DF7CBE80059C2A83B08C6C89459202DCB7D6E5072511EA
5EE12897B25691DEE762AF0365F0FF97B83343A89226E44C13923EB502A36639
F7CCECA1C7C2FF5103A6B0AAF8F5CBE80FA5025BEA2B82ECFFF8A418D20D93D4
BD2501A30A61A4A906FE2796C7CBA82CBC29FEDEE39359C351BA8960636ADF06
2E90790310312A3CFC4AA9737766394E6DCD202B31E5162137227C9995C6F0BF
EB3F5BC0FE45B681C73C50BA9A46D05F749C1EC8B0A623BD35418A3FFC688255
1FF6C31C46B294F344716E2AC29402824FF967E18EE39082BF818927D3AA5AF2
BC4423F2FC4D1F287F3F28CF40C1414EA6FE4D814CDCAAC830DD6D2B2353019C
8CBCEF379823D159B1FE8AD303E24F3DE486F92FDA197833A0CF88A9AB738099
3FECCDEDF261F9F4E5DF33D55934F68495996685B7B19883B9F981FDD5AE2726
03E4D20E7B2FEC5222F15CB9F08C584BF5F2330AFC683A25F544EAB598AD61EB
4B51DD109B885B2B96CA1D794E6E501F818BD26E5A73E6024ECEE045639E7A65
0438AF260A40C3730045CCE64066306B98AED8E8A2C89898F7DFE122178F6E05
FD0EAEB026BEB5B1B2ED69589587A48B07559755C8A93855793FE2798EE5543D
775A3A54F98A822AD7803186227C6499DC4E6DE17A43D33DB3BE958098A9D7BA
E199F59281F5D884990D92861BA0BEA5DA5691672DB96087B51CE82D5A1DF120
D636FBF48D27831269D3042A1035E216DC09694D2406245E84F4D47146CDB5CF
9C71556651A455077D64B52C5FF4B80250D312DBDF85BC91476870168A1F78B3
9184438CE528180EB98040FD012B78641424814F2BCF083E0B5BCC7BFF6D08F6
1C99A941325197E0C22F0D1816C6254BC7611C6EE919C344A6253E4751A88881
FD5D5E7CBA740B6A4A544179C5B186505539CB2A58832AA92DA5F34F197E3EFB
F17115FDFF59E31B0ED3280975DE77370B3A4C7B16C5FFC37C0DA99CD531BABE
8865E8D3B7640F59B5C07D2CCA6C0BE327F44CA9CFE75AB6288B531DD76F5B11
2B0D2F53BAC7A0C616D2DD6A791071EBC06CC24C5BAAFCBDF5B3F16C8E43EC2B
9949EDF0284D9893D32EC0B93813D97A5A5854D105E2A2205BB410B3E1317CF2
47224ECF9FFD37B88C603A4660FE64C1C440D1C80183C887483EA284E78AF165
1CA9FEAAD87981D6DA72961783F252E49C557477B00CDF076B0AEAD03AB485F4
3DD669E9F6D78F7F3A3FFD62C2CB2499F2B677D98E025393118B91A352BE0829
A118464C6B20242E8CD67888F92E655BA87F5EB2D25AA2CEAB8E76A44DDDB0F5
E05E68FFF895430533036E207805E8728B9458990C7913426DEC6B5C057130D3
F2F686561687C92D7BF00C6F8129E347C6489FD4FC798AD86296A4A61BA20E74
E4B3142195DD8F5B2A24F02D5475B0BB07D03DAA4EE95D353CDED25EAEF73162
A697698C7CF922B32BFC199714C3629512C6A5711DAF0A3F095727533D145777
05EFEFF28C43761EDC0E66A5E026E1A8288BA642299C4149A5AE4E4FAC9D0702
671BE7D9FC29F72B855A43C3097D27E513141B91A947E0A1C2BE7CC359EE39E8
366E469CA5691562A9024DA5CF1F78C47030153DE1E18A7C19FE9BA51A9EE3B8
F06BD971FDDB944D1D7BAD30DB394D570DC876A06C08E3CF3E7821D6EE3434C4
59C21C7ED769E57608B34E65A38D5E0D698D5745789C7DCC5B62AAE47E6B8FB0
144A861E53B3DFC6938BD96F9457A18E4CAC6FED9AFAF376F3BE1010773C400A
205CC6F68A86B7BC067186BCDC0A56EB2F2BE12BB9709CCF0FBE3A63A34884DA
9097C0F903F0F05E0F77EA5D56FD8F63D88DA381B78C531EB3A8617F33EB313E
70DFFE3C6944EEA7E4F8A562D88900AE157CF0DAEA24C808D7489B40C02FD1F4
8CE28F36A910F5A1E58E8097DE6494071CDF7D441B7AE1D7BE2A34836ADD027C
DF5266E0D4412F3AEFBDB0DEA139D539F1465D50C5D1DF71C76A201B2A473992
74FBC801C11E798CEFCD58591F939ED00665A80E3632772BF8651FCEF83CDB92
F91E71CEBF903B4F7D72FD4AB3216DF6AC30A36A1D6278295355E2C031D4CFB4
919689DC056AF826360AECF7C4B350822CAF15101B4757BF7017016826D69954
0EDCF90853ACE507C7C5A49B700AEFE3F8CD4087B0766575358EC8570A20D7F8
C77AACC84E85075B2C3409B8138618E9DCE7FABA82EC8D4B46DF196E1C9BD16E
E084196CDBAE8F169469B65E12CE716F6CAC258AD20C469CB28CEBF1B460D76C
10A45C4F2DDA808D365A7468BFCFBF7E680446F888A66131AC4A0FE3595C5D7E
2FE528C85539D2FB653AA5B80803F2C4113755D38F0B959DD34D98A0D0401AD3
156F206B7A74320671524A2972BC504F7BD9AD7ECACCDEC61A3D29CA1598EF60
7BE11D603F92B2607D41C3029037B066461FE03D435D01FFF15E7A613EACE41E
72B21E95ED104E7114998398FEB89FDF2C8B0716B03CBE21890B55E5ADEEA155
4980E13B37FEC33DF3B23FC7BFEDA3E7716051C1F89AA9AB1F8C02D0DC35746E
97C2B29B7A426EDE8B6063159C32943F0F6E73D8A0F7EF263E1949E2646B4461
7C98548A8EC0CC14829F7C67999234D302FEC2693A135A270FB3E83D87F3A394
FC38E69967833C0E55196F8F3B0DFB89AA1D0FA3717BF3CD52E7FC86C8FAF847
5830D0F304FD7A9EB6B8AEE7919322D2FDF6C7D1FA0426F641802D31F91BAA40
C3D90C30A01449D0F3E9204F50097240019E47B2230986A5D37263D62BA3D19B
B5CFA09589514739523752C2764531F3545D0A6C526561B05D09F8FC70C3D58D
C484BEF92EB91BEEB53A9F5D5CB7F436963680915043708FECB0DDD7291AC770
D3C56ACF545343BDA010B3C6F6AE2F5DB222525CCDA88656F64C44AA9DF62672
39F922B9E281B6F00CAE1327243C3D00DA294BA0195DB7EB209E1E665209BF7F
436E36EF8FDB117D743C63B5D810DE8F57625819D86D7AE834D7135E30F446AC
81D5EE21179FDFFF655E4CFDAB7EBDF1D97E1511D30CCC901EBB437A6C1DE102
4E5FCE8DDE9CD3808E9414A800D10B971FC44F0FF1C2D53D94B322938F1E6A2A
BAA4FC00D5E3861F46E3ADCA550BEFE0F2B0AEF0F0D933594173CC0D045518ED
F8EDF9D742EEFF2C755E5B73BD7D555403B83025FC259D4ABAD69050D64014F7
6DD6236FCD97E10A2E18ED2539FB148AC5342A93321811DC208D3C2EAD0BD5AD
97E55CAC100AE563564FC1EF1A29D21BAD52D2348CA838B3A1CA68A22C5A5134
CB002A8CCDDD2FD96D9E404038CB57A801878980B52AFEED4E5485EF2B7412F4
3F6225EFD82D88C1D80B6549685169810DDF2180024DCDA9C624525A0562CE7F
AA8E0392ACF5354D2543083B82A86CB11FFE116CC66FEB9C7F7BA7E1E1FC1713
37AC5E8807FDC9766DC49DB36DF165E858F8FCE1920A890F6AB64F6326C1262B
4249BA9ACCE92714658C23144649A72A043685E0A6F25531307FA0CDC636BC45
355460BE4E0C5D87B5B3B91F8CD458C787BF15785172C8C7D6DD63223EFC56D5
FA82C1822A63099475B57761DE73497A3B48229EEB9AC514E4F025A6152DCA8B
84D0651F4644CF51DAA8608BC3B698A22BAE29A80DD041B30F0D5C736A02317C
8E07C2A4258E17D65820947CA03D6E1ACFF8BB118DFA9CD64A24137F2DA6C213
EA4DEA027244F058645DA3D75CC7D3C164AA57C5E45487B34D7E47CB31336E00
CAEBF6CB3BB923E06AC9A1A8591A77BAE6D06BB1AB0AEA89B6683EFB7343EA55
CD33B0B48FDA806B70BC9271B58F35434A12E8F25CC476CDA2B3F0E0A54134F9
1D7B4ACAE954658CFEB3FF04F3FC12864FD7D591A617EC7403730DC7FDC3F629
8C4728CFECA3EC16C797B31B0006D964EE87B70841BBB0011D88009278164BA3
805DB60EB9C51AD662B3C599792AD66F91F501513207D9C72D6CD3ACA35686FB
366E3AD523DAF21AF42A13AFAFA8AEE419D4CCC751E12FC71ABAA6E6F86CD97C
462D2C10D3674F72090CC15AAD971B63A48BB651DD563937FF30565A9C321531
8E18B26FE6DB7F15D9EC1E9D95B61F2140D5CF62135B9B4EAA4D3CADB588707C
BEF5FAA263C6B723AE4E5B34B405A0A13E318FEB24173D867F89B9A683BEC462
C4D7F52FC3B278571FE56ED9508F3EAD9A57AB12A9A916D7EB1B0EBCB743ACAC
3D1C66E61C25984CB5511FBAE3C48B1B02C9879849979B4B48F0B46C30A3AA50
3426744E5DAB6A37F59EFE348249E61D7F5B5320DB4E6C7F70B76CB486438D24
7D0B74DADE6260F4B0C4032A9800E5888A245527E79C94DE0816CEF9412CD96B
C9190FF4B231AA728E36BE2546E5F2F3F85F7F266D95AD1FC0452CA116399E38
14C8F18881645959DF14405AD0EF2B7E4FB2E203561018F0CE7D646FBBFFAADE
EC1277F9FBFCBF4B160F12C32FAE78D9DC81D867E935B40F3FEE29A68FBAF8F9
5762FD3FF5A486880F1525CEB017B47C1D4042C85EEFEC49D94E6CE95E84CFF5
7472F27BC0D111482C5E2407F0458D28393E55735287BB3FE88A4C5830E72989
CA4DCF4C7508D140B4CAB87A0BD6077578FDF7824D84930FAAAD301A5CA2CBA3
5ACA10A7D7C40A68E30997EE65A4CF4DA119383EA322C887A4CBEA8856C57E6B
A1CCBD3E03F31409B5BA1953B666F7844A77BAEC876FFE428230355BC0F219EF
2A79C8B677EF946A2D806DF2D34B2A2DF1B4A0BFAD4B546EC2DFDE7ECBE5D8C9
B115A8C53BA9CFE2ED0B534C5F445106127A7F904075DF4904BA3DAB79611035
AC93F66181F2FB1E61E10F48D45355D3D789DF5DC0867AE2471C93412D3CF356
2A4273C488F9718E591902F81CEDBF86D89657B0AC73866CDF49993525345FF3
AD6071DB1C41F348377A602A2DF39F6A86BAC24210FC5C1A4ACBB7929C516CD6
8727714EBCDA1DB81B8585681E04D37EDBE08B16E57CFD4D4CA5549420571F2F
25E55307F5C1C44E4A53175CD1905CB999C5471D979E1C30D13BBBD899E1BA26
E5DE5F05ABC9C3A97C54450063210EB1F67B8729981B74F02A7C71117EACDA87
87FF9B03BE7AA5391E83E48C07B36A79D257CA317EDACF6460DADCF9003A34BB
C10BCD0FB5E3501AE535D2CECE9CA7826991D44F272514E444808074FB231E01
F5541F0A8CA67077222955AD4F8393568251A46592845F9D0AC73865D838BF90
6364A9AC092CF2CF35C8E41E4B85E888058F4C5A79047A6877E9877C52AC8D3C
F51DE4D82FCC40E17A43092C77F4EEE3666823694CF5130BB7AA3EC5F963CB79
EBF4F33B3F7DADAD8616B41A53A837CFB399F02B5205920A4388B771CBBC2AC1
F0BBD399D532B2DD0E8896A074476BFB97277C17C6C0DC3DBF44DB2061E5F7FE
51C375EAB73115F9
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 23867906 17900936 1000 600 600
(/Users/sepehr/Dropbox/Lecture Notes/Intelligent Systems/Lec5 - Linear Regression/.texpadtmp/Bayesia)
@start /Fa 134[45 2[45 1[25 35 30 2[45 45 1[25 2[25 45
45 30 40 1[40 13[66 1[51 6[56 6[56 69[{ encntx-ec-tlf ReEncodeFont }18
90.9091 /TeXGyreTermes-Regular rf /Fb 198[42 6[42 42
42 48[{ encntx-ec-tlf ReEncodeFont }4 83.022 /TeXGyreTermes-Regular
rf /Fc 134[60 4[33 47 40 1[60 60 60 93 33 60 1[33 60
60 1[53 60 2[53 13[66 5[106 3[40 5[80 67[{ encntx-ec-tlf ReEncodeFont }
20 119.552 /TeXGyreTermes-Regular rf /Fd 140[47 53 2[60
66 4[33 1[60 1[53 3[60 14[86 5[80 76[{ encntx-ec-tlf ReEncodeFont }10
119.552 /TeXGyreTermes-Bold rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
% dvips-unknown
statusdict /setpageparams known { hsize vsize 0 1 statusdict begin {
setpageparams } stopped end } { true } ifelse { statusdict /setpage known
{ hsize vsize 1 statusdict begin { setpage } stopped pop end } if } if
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -372 -608 a
SDict begin H.S end
 -372 -608
a -372 -608 a
SDict begin H.R end
 -372 -608 a -372 -608 a
SDict begin [/View [/XYZ H.V]/Dest (Navigation1) cvn /DEST pdfmark
end
 -372 -608 a -372
-608 a
SDict begin H.S end
 -372 -608 a -372 -608 a
SDict begin H.R end
 -372 -608 a -372 -608
a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -372 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 1 TeXcolorgray -600 1668 3024 2268 v 0
TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 2424 1668
a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0.15 0.15 0.525
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray 0.68 0.68 0.88
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray Black 0 TeXcolorgray -364 -600 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -364
-600 a -364 -600 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -364 -600 a -364 -600 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -364 -600
a -364 -600 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -364 -600 a -364 -600 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -364 -600 a -364
-600 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -364 -600 a -364 -600 a
SDict begin H.S end
 -364 -600 a -364 -600
a
SDict begin 13.6 H.A end
 -364 -600 a -364 -600 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -364 -600 a -364 -600 a
SDict begin [/Producer (dvips + Distiller)/Title (Linear Regression [1.5cm] Intelligent Systems and Control [.5cm] 2019)/Subject
()/Creator (LaTeX with Beamer class)/Author (Sepehr Maleki)/Keywords
() /DOCINFO pdfmark end
 -364
-600 a -364 -600 a
SDict begin [ {Catalog} <</PageLabels<</Nums[0<</P(1)>>]>>>> /PUT pdfmark
end
 -364 -600 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
447 -13 a Fd(Linear)30 b(R)n(egr)o(ession)157 491 y Fc(Intellig)m(ent)g
(Sy)m(s)n(tems)g(and)f(Control)829 708 y Fb(2019)p 0
TeXcolorgray 0.25098 0.25098 0.25098 TeXcolorrgb 562
1126 a Fc(Sepehr)g(Maleki)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 521 1308 a Fa(U)m(niv)m(ersity)c(of)f
(Lincoln)503 1421 y(Sc)o(hool)f(of)h(Engineer)r(ing)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
